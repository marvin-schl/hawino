
// ****************** Fbsinusfahrt.cpp *************************
// Generated by TE140x-TargetForMatlabSimulink  2.3.1.1
// MATLAB 9.11.0.2022996 (R2021b) Update 4 (win64)
// TwinCAT 3.1.4024.0
// TwinCAT Target 2.3.1.1
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************

#include "TcPch.h"
#pragma hdrstop

#include "Fbsinusfahrt.h"

#include "sinusfahrt.h"

#include "ObjClassFactory.h"
using namespace TcMgSdk;

///////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
#if TC_BUILD<=4024
DEFINE_THIS_FILE()
#endif

///////////////////////////////////////////////////////////////////////////////
// CFbsinusfahrt specific globals
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbsinusfahrt static members
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbsinusfahrt implementation
///////////////////////////////////////////////////////////////////////////////
CFbsinusfahrt::CFbsinusfahrt()
{
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;


	
}

CFbsinusfahrt::~CFbsinusfahrt()
{

}

bool CFbsinusfahrt::FB_Main()
{

	bool fbMainResult = true;

	

	auto fpState = FpControl(FpCtrlSection::Update);
	::sinusfahrt_step(((RT_MODEL_sinusfahrt_T*)Psinusfahrt_M));

	FpRestore(fpState);


	return fbMainResult;
}

void CFbsinusfahrt::_FB_Main(ST_FB_Main_FB_sinusfahrt* ST_Param)
{
	ST_Param->result = ((CFbsinusfahrt*)ST_Param->pInst)->FB_Main(  );
}

bool CFbsinusfahrt::FB_exit(bool bInCopyCode)
{

	bool fbExitResult = true;

	auto fpState = FpControl(FpCtrlSection::Init);
	if (((RT_MODEL_sinusfahrt_T*)Psinusfahrt_M)!=NULL)
	{
		::sinusfahrt_terminate(((RT_MODEL_sinusfahrt_T*)Psinusfahrt_M));
		Psinusfahrt_M = NULL;
	}

	FpRestore(fpState);


	SingleInstanceRelease();
	__super::Exit(bInCopyCode);

	return fbExitResult;
}

void CFbsinusfahrt::_FB_exit(ST_FB_exit_FB_sinusfahrt* ST_Param)
{
	ST_Param->result = ((CFbsinusfahrt*)ST_Param->pInst)->FB_exit( ST_Param->bInCopyCode );
}

bool CFbsinusfahrt::FB_init(bool bInitRetains, bool bInCopyCode)
{

	bool fbInitResult = true;

	if(fbInitResult)
	{
		Psinusfahrt_M = ::sinusfahrt();
		memset(&(TcModuleOutput_vxSLX),0,sizeof(TcModuleOutput_vxSLX));

		m_pData = nullptr;
		fbInitResult = __super::Init(0,TC_BUILD_MIN,bInitRetains,bInCopyCode);
		if (!fbInitResult)
		{
			error("__super::Init() did not succeed");
		}
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;


	}

	fbInitResult &= SingleInstanceLock(GUID_NULL);
	if(fbInitResult)
	{
		auto fpState = FpControl(FpCtrlSection::Init);
		::sinusfahrt_initialize(((RT_MODEL_sinusfahrt_T*)Psinusfahrt_M));
		((RT_MODEL_sinusfahrt_T*)Psinusfahrt_M)->dwork->vxSLX_PWORK = reinterpret_cast<PVOID>(&(TcModuleOutput_vxSLX));

		FpRestore(fpState);
	}
	else
	{
		error("SingleInstanceLock() did not succeed");
	}

	return fbInitResult;
}

void CFbsinusfahrt::_FB_init(ST_FB_init_FB_sinusfahrt* ST_Param)
{
	ST_Param->result = ((CFbsinusfahrt*)ST_Param->pInst)->FB_init( ST_Param->bInitRetains, ST_Param->bInCopyCode );
}




BEGIN_FUNC_MAP_FB(CFbsinusfahrt)
	FUNC_ENTRY_LIB(VID_sinusfahrt, CID_FB_SINUSFAHRT , "FB_sinusfahrt" "__main", CFbsinusfahrt::_FB_Main)
FUNC_METHOD_ENTRY_LIB(VID_sinusfahrt,CID_FB_SINUSFAHRT , "FB_EXIT", "FB_sinusfahrt" "__FB_exit", CFbsinusfahrt::_FB_exit)
FUNC_METHOD_ENTRY_LIB(VID_sinusfahrt,CID_FB_SINUSFAHRT , "FB_INIT", "FB_sinusfahrt" "__FB_init", CFbsinusfahrt::_FB_init)

END_FUNC_MAP_FB()

DECLARE_FUNCMAP_CREATOR(HandleFuncMap_CFbsinusfahrt)
{
	return CFbsinusfahrt::TcHandleFuncMap(mode, idx, idxcounter, pFncId, pipFnc, ppMethod, ppName, pSignature, pVersion);
}
