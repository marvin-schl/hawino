// ****************** TcComA_Search.cpp *************************
// Generated by TE140x-TargetForMatlabSimulink  2.3.1.1
// MATLAB 9.11.0.2022996 (R2021b) Update 4 (win64)
// TwinCAT 3.1.4024.0
// TwinCAT Target 2.3.1.1
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************
#include "TcPch.h"
#pragma hdrstop

#include "TcComA_Search.h"

#ifdef EXT_MODE
#include "TcExtMode.h"
#include "TcExtWork.h"
#endif

#include "A_Search.h"

#include "ObjClassFactory.h"
using namespace TcMgSdk;


///////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
#if TC_BUILD<=4024
DEFINE_THIS_FILE()
#endif

///////////////////////////////////////////////////////////////////////////////
// CTcComA_Search specific globals
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CTcComA_Search static members
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CTcComA_Search implementation
///////////////////////////////////////////////////////////////////////////////
BEGIN_INTERFACE_MAP(CTcComA_Search)
INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcPersist,ITcPersist)
	INTERFACE_ENTRY(IID_ITComObject,ITComObject)
	INTERFACE_ENTRY(IID_ITcWatchSource,ITcWatchSource)
	INTERFACE_ENTRY(IID_ITcCyclic,ITcCyclic)
	INTERFACE_ENTRY(IID_ITcPostCyclic,ITcPostCyclic)
	INTERFACE_ENTRY(IID_ITcADI,ITcADI)
	INTERFACE_ENTRY(IID_ITcA_Search,ITcA_Search)
END_INTERFACE_MAP()

IMPLEMENT_ITCWATCHSOURCE(CTcComA_Search)

BEGIN_OBJDATAAREA_MAP(CTcComA_Search)
	OBJDATAAREA_SPAN_PTR_SIZE_FLAGS( 0, 1, &(AdditionalInports), sizeof(AdditionalInports), 0)
	OBJDATAAREA_SPAN_PTR_SIZE_FLAGS( 1, 1, &(AdditionalOutports), sizeof(AdditionalOutports), OBJDATAAREA_DISABLE_SET)
	OBJDATAAREA_SPAN_PTR_SIZE_FLAGS( 2, 1, PA_Search_M->blockIO, sizeof(*(PA_Search_M->blockIO)), OBJDATAAREA_DISABLE_SET)
END_OBJDATAAREA_MAP()

BEGIN_SETOBJPARA_MAP2(CTcComA_Search,TcMatSim::GeneratedTcCom)
	SETOBJPARA_DATAAREA_MAP()
	SETOBJPARA_VALUE(0x00000001,m_TraceLevelMax)
	SETOBJPARA_VALUE(0x00000002,m_ModuleCaller)
	SETOBJPARA_VALUE(0x00000003,m_CallerVerification)
	SETOBJPARA_VALUE(0x00000004,m_StepSizeAdaptation)
	SETOBJPARA_VALUE(0x00000005,m_ExecutionSequence)
	SETOBJPARA_VALUE(0x00000006,m_Execute)
	SETOBJPARA_VALUE(0x00000007,m_AccessLockState)
	SETOBJPARA_VALUE(0x00000008,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init))
	SETOBJPARA_VALUE(0x00000009,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update))
	SETOBJPARA_VALUE_DENIED(0x0000000a,m_ModuleBuildInfo)
	SETOBJPARA_VALUE_DENIED(0x0000000b,m_Initialized)
	SETOBJPARA_VALUE_DENIED(0x0000000c,&m_InitException)
	SETOBJPARA_VALUE_DENIED(0x0000000d,&m_ContextInfo[0].Execution.CycleCount)
	SETOBJPARA_VALUE_DENIED(0x0000000e,&m_ContextInfo[0].Execution.ExceptionCount)
	SETOBJPARA_VALUE_DENIED(0x0000000f,&m_ContextInfo[0].Execution.ActException)
END_SETOBJPARA_MAP2(TcMatSim::GeneratedTcCom)

BEGIN_GETOBJPARA_MAP2(CTcComA_Search,TcMatSim::GeneratedTcCom)
	GETOBJPARA_DATAAREA_MAP()
	GETOBJPARA_VALUE(0x00000001,m_TraceLevelMax)
	GETOBJPARA_VALUE(0x00000002,m_ModuleCaller)
	GETOBJPARA_VALUE(0x00000003,m_CallerVerification)
	GETOBJPARA_VALUE(0x00000004,m_StepSizeAdaptation)
	GETOBJPARA_VALUE(0x00000005,m_ExecutionSequence)
	GETOBJPARA_VALUE(0x00000006,m_Execute)
	GETOBJPARA_VALUE(0x00000007,m_AccessLockState)
	GETOBJPARA_VALUE(0x00000008,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init))
	GETOBJPARA_VALUE(0x00000009,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update))
	GETOBJPARA_VALUE(0x0000000a,m_ModuleBuildInfo)
	GETOBJPARA_VALUE(0x0000000b,m_Initialized)
	GETOBJPARA_PTR_SIZE(0x0000000c,&m_InitException,sizeof(m_InitException))
	GETOBJPARA_PTR_SIZE(0x0000000d,&m_ContextInfo[0].Execution.CycleCount,sizeof(m_ContextInfo[0].Execution.CycleCount))
	GETOBJPARA_PTR_SIZE(0x0000000e,&m_ContextInfo[0].Execution.ExceptionCount,sizeof(m_ContextInfo[0].Execution.ExceptionCount))
	GETOBJPARA_PTR_SIZE(0x0000000f,&m_ContextInfo[0].Execution.ActException,sizeof(m_ContextInfo[0].Execution.ActException))
END_GETOBJPARA_MAP2(TcMatSim::GeneratedTcCom)

BEGIN_OBJPARAWATCH_MAP2(CTcComA_Search)
	OBJPARAWATCH_DATAAREA_MAP()
	OBJPARAWATCH_VALUE(0x00000001,m_TraceLevelMax)
	OBJPARAWATCH_VALUE(0x00000002,m_ModuleCaller)
	OBJPARAWATCH_VALUE(0x00000003,m_CallerVerification)
	OBJPARAWATCH_VALUE(0x00000004,m_StepSizeAdaptation)
	OBJPARAWATCH_VALUE(0x00000005,m_ExecutionSequence)
	OBJPARAWATCH_VALUE(0x00000006,m_Execute)
	OBJPARAWATCH_VALUE(0x00000007,m_AccessLockState)
	OBJPARAWATCH_VALUE(0x00000008,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init))
	OBJPARAWATCH_VALUE(0x00000009,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update))
	OBJPARAWATCH_VALUE(0x0000000a,m_ModuleBuildInfo)
	OBJPARAWATCH_VALUE(0x0000000b,m_Initialized)
	OBJPARAWATCH_PTR_SIZE(0x0000000c,&m_InitException,sizeof(m_InitException))
	OBJPARAWATCH_PTR_SIZE(0x0000000d,&m_ContextInfo[0].Execution.CycleCount,sizeof(m_ContextInfo[0].Execution.CycleCount))
	OBJPARAWATCH_PTR_SIZE(0x0000000e,&m_ContextInfo[0].Execution.ExceptionCount,sizeof(m_ContextInfo[0].Execution.ExceptionCount))
	OBJPARAWATCH_PTR_SIZE(0x0000000f,&m_ContextInfo[0].Execution.ActException,sizeof(m_ContextInfo[0].Execution.ActException))
END_OBJPARAWATCH_MAP2(TcMatSim::GeneratedTcCom)

IMPLEMENT_ITCADI(CTcComA_Search)

IMPLEMENT_IPERSIST_LIB(CTcComA_Search,VID_A_Search,CID_A_SEARCH)

// State transition: Init -> PreOp
HRESULT CTcComA_Search::SetObjStateIP(ITComObjectServer* ipSrv, TComInitDataHdr* pInitData)
{
	HRESULT hr = S_OK;

	hr = SingleInstanceLock(ipSrv, GUID_NULL);
	if (SUCCEEDED(hr))
	{
		m_ContextInfo[0].OriginalTid = 0;
		m_ContextInfo[0].OriginalSampleTime = 0.02;

	}
	if (SUCCEEDED(hr))
	{
		PA_Search_M = ::A_Search();
		memset(&(AdditionalOutports.TcModuleOutput_xCoordinates),0,sizeof(AdditionalOutports.TcModuleOutput_xCoordinates));
		memset(&(AdditionalOutports.TcModuleOutput_yCoordinates),0,sizeof(AdditionalOutports.TcModuleOutput_yCoordinates));
		AdditionalInports.TcModuleInput_enable = 0;
		AdditionalInports.TcModuleInput_endNode = 0;
		AdditionalInports.TcModuleInput_xRobotEnd = 0;
		AdditionalInports.TcModuleInput_xRobotStart = 0;
		AdditionalInports.TcModuleInput_yRobotEnd = 0;
		AdditionalInports.TcModuleInput_yRobotStart = 0;

	}
	if (FAILED(hr))
	{
		SetObjStatePI();
	}
	return hr;
}

// State transition: PreOp -> SafeOp
HRESULT CTcComA_Search::SetObjStatePS(TComInitDataHdr* pInitData)
{
	HRESULT hr = S_OK;


	if(SUCCEEDED(hr))
	{
		auto fpState = FpControl(FpCtrlSection::Init);
		::A_Search_initialize(PA_Search_M);
		PA_Search_M->dwork->enable_PWORK = reinterpret_cast<PVOID>(&(AdditionalInports.TcModuleInput_enable));
		PA_Search_M->dwork->endNode_PWORK = reinterpret_cast<PVOID>(&(AdditionalInports.TcModuleInput_endNode));
		PA_Search_M->dwork->xRobotEnd_PWORK = reinterpret_cast<PVOID>(&(AdditionalInports.TcModuleInput_xRobotEnd));
		PA_Search_M->dwork->xRobotStart_PWORK = reinterpret_cast<PVOID>(&(AdditionalInports.TcModuleInput_xRobotStart));
		PA_Search_M->dwork->yRobotEnd_PWORK = reinterpret_cast<PVOID>(&(AdditionalInports.TcModuleInput_yRobotEnd));
		PA_Search_M->dwork->yRobotStart_PWORK = reinterpret_cast<PVOID>(&(AdditionalInports.TcModuleInput_yRobotStart));
		PA_Search_M->dwork->xCoordinates_PWORK = reinterpret_cast<PVOID>(&(AdditionalOutports.TcModuleOutput_xCoordinates));
		PA_Search_M->dwork->yCoordinates_PWORK = reinterpret_cast<PVOID>(&(AdditionalOutports.TcModuleOutput_yCoordinates));

		if (SUCCEEDED(hr))
			hr = CheckAndAdaptCycleTimes();
		m_Initialized = SUCCEEDED(hr);
		FpRestore(fpState);
	}

	if (FAILED(hr))
	{
		SetObjStateSP();
	}
	return hr;
}

// State transition: SafeOp -> Op
HRESULT CTcComA_Search::SetObjStateSO()
{
	HRESULT hr = S_OK;

	if (FAILED(hr))
	{
		SetObjStateOS();
	}
	return hr;
}

// State transition: Op -> SafeOp
HRESULT CTcComA_Search::SetObjStateOS()
{
	HRESULT hr = S_OK;

	return hr;
}

// State transition: SafeOp -> PreOp
HRESULT CTcComA_Search::SetObjStateSP()
{
	HRESULT hr = S_OK;

	auto fpState = FpControl(FpCtrlSection::Init);
	FpRestore(fpState);

	m_Initialized = false;

	return hr;
}

// State transition: PreOp -> Init
HRESULT CTcComA_Search::SetObjStatePI()
{
	HRESULT hr = S_OK;

	auto fpState = FpControl(FpCtrlSection::Init);
	if (PA_Search_M!=NULL)
	{
		::A_Search_terminate(PA_Search_M);
		PA_Search_M = NULL;
	}

	FpRestore(fpState);
	SingleInstanceRelease();

	return hr;
}

// Constructor
CTcComA_Search::CTcComA_Search() :
	TcMatSim::GeneratedTcCom(1,0,TC_BUILD_MIN)
{
	m_TraceLevelMax = tlInfo;
	m_ModuleCaller = ModuleCaller::CyclicTask;
	m_CallerVerification = CallerVerification::Default;
	m_StepSizeAdaptation = StepSizeAdaptation::RequireMatchingTaskCycleTime;
	m_ExecutionSequence = ExecutionSequence2::UpdateBeforeOutputMapping;
	m_Execute = false;
	m_AccessLockState = TCOM_STATE_OP;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;
	m_Initialized = 0;

#ifdef _DEBUG
	m_ModuleBuildInfo.Debug = true;
#else
	m_ModuleBuildInfo.Debug = false;
#endif
	m_ModuleBuildInfo.TcBuild = TC_BUILD;
	m_ModuleBuildInfo.TcRevision = TC_REVISION;

}

// Destructor
CTcComA_Search::~CTcComA_Search()
{

}

HRESULT TCOMAPI CTcComA_Search::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{

	if (!m_Execute)
		return S_FALSE;
	if (!m_Initialized)
		return ADS_E_NOTINIT;
	if (m_ExecutionSequence!=TcMgSdk::ExecutionSequence2::UpdateBeforeOutputMapping)
		return S_OK;
	m_ContextInfo[context].ExecutingCyclicCall = true;
	HRESULT hr = Update(ipTask, context);
	m_ContextInfo[context].ExecutingCyclicCall = false;
	return hr;
}

HRESULT TCOMAPI CTcComA_Search::PostCyclicUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{

	if (!m_Execute)
		return S_FALSE;
	if (!m_Initialized)
		return ADS_E_NOTINIT;
	if (m_ExecutionSequence!=TcMgSdk::ExecutionSequence2::IoAtTaskBegin)
		return S_OK;
	m_ContextInfo[context].ExecutingPostCyclicCall = true;
	HRESULT hr = Update(ipTask, context);
	m_ContextInfo[context].ExecutingPostCyclicCall = false;
	return hr;
}

HRESULT CTcComA_Search::Update(ITcTask* ipTask, ULONG_PTR context)
{
	HRESULT hr = SynchronizeTasks(context);
	if(SUCCEEDED(hr))
		hr = VerifyCaller(ipTask, context);

	if(SUCCEEDED(hr) && m_ContextInfo[context].Synchronized)
	{
		m_ContextInfo[context].Execution.CycleCount++;
		auto fpState = FpControl(FpCtrlSection::Update);
		TcTry
		{
			hr = EvalMdlErrorStatus(PA_Search_M->errorStatus,false);
			if (hr == S_OK)
			{
				::A_Search_step(PA_Search_M);
				EvalMdlErrorStatus(PA_Search_M->errorStatus,true);
			}

		}
		TcExcept(ExceptionFilter(ipTask, GetExceptionInformation(), static_cast<LONG>(context), &m_Execute))
		{
			m_Execute = false;
			m_Initialized = false;
			m_Trace.Log(TcTraceLevel::tlError,"%s: Stopping cyclic execution of model code due to an exception. Module reinitialization is required.", m_objName.str);
		}
		FpRestore(fpState);
	}

	return hr;

}

HRESULT CTcComA_Search::CheckAndAdaptCycleTimes()
{
	double fCycleTimeMultiplier = 1;
	HRESULT hr = CheckCycleTimes(fCycleTimeMultiplier);
	return hr;
}

// ITcA_Search
HRESULT TCOMAPI CTcComA_Search::A_Search_step()
{
	HRESULT hr = S_OK;
	auto fpState = FpControl(FpCtrlSection::Update);

	::A_Search_step(PA_Search_M);


	FpRestore(fpState);
	return hr;
}




HRESULT TCOMAPI Create_CTcComA_Search (PITCID pIid, PPVOID pipItf)
{
	return Create<CTcComA_Search>(*pIid, pipItf);
}
