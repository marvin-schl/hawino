<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Kollisionserkennung" Id="{2163055e-1523-4ae1-8ad2-f781f29a50e9}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Kollisionserkennung
VAR
	robotPoseArray AT%I*: ARRAY[1..8] OF RobotPose;
	vxRobot AT%I*: LREAL;
	vyRobot AT%I*: LREAL;
	collisionDetected AT%Q*: BOOL := FALSE;
	robotCollision AT%Q* : ARRAY[1..5] OF BOOL;
		
	robotNumber : INT := Var_HAWIno.Robot_Number;
	xRobot, yRobot: LREAL;
	i, j, k : INT := 1;
	detected : INT := 1;
	quadrant, collide : INT := 0;
	robotActive :ARRAY[1..5] OF INT;
	
	//Bounding Box
	x1Box,y1Box,x2Box,y2Box,x3Box,y3Box,x4Box,y4Box : LREAL; 
	alpha, beta, gamma, diagonal : LREAL := 0.0;
	breite, laenge : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[FOR i := 1 TO 4 BY 1 DO
	IF i = robotNumber THEN
		xRobot := robotPoseArray[i].x;
		yRobot := robotPoseArray[i].y;
	END_IF
END_FOR

//350mm Durchmesser des Roboters & 70mm Toleranzabstand
breite := 350 + 80; 
laenge := 350 + 80;
diagonal := SQRT(EXPT(breite,2) + EXPT(laenge,2));
IF vyRobot <> 0 AND vxRobot <> 0 THEN
	gamma  := ATAN2(vyRobot,vxRobot); //Drehung des Roboters
	alpha := ABS(ATAN(vyRobot/vxRobot)); //Winkel des gedrehten Boxes
END_IF
beta := ATAN(laenge/breite); //Winkel des festen Dreiecks

//Bounding Box dreht mit der Roboterblickrichtung
IF gamma >= 0 AND gamma < pi/2 THEN //Quadrant 1
	quadrant := 1;
	alpha := gamma;
	x1Box := xRobot + COS(alpha) * breite;
	y1Box := yRobot + SIN(alpha) * breite;
	x2Box := xRobot + COS(alpha + beta) * diagonal;
	y2Box := yRobot + SIN(alpha + beta) * diagonal;
	x3Box := xRobot - SIN(alpha + beta) * diagonal;
	y3Box := yRobot + COS(alpha + beta) * diagonal;
	x4Box := xRobot - COS(alpha) * breite;
	y4Box := yRobot - SIN(alpha) * breite; 
ELSIF gamma >= pi/2 AND gamma <= pi THEN //Quadrant 2
	quadrant := 2;
	alpha := gamma - pi/2;
	x1Box := xRobot - SIN(alpha) * breite;
	y1Box := yRobot + COS(alpha) * breite;
	x2Box := xRobot - SIN(alpha + beta) * diagonal;
	y2Box := yRobot + COS(alpha + beta) * diagonal;
	x3Box := xRobot - COS(alpha + beta) * diagonal;
	y3Box := yRobot - SIN(alpha + beta) * diagonal;
	x4Box := xRobot + SIN(alpha) * breite;
	y4Box := yRobot - COS(alpha) * breite;
ELSIF gamma > -pi AND gamma < -pi/2 THEN //Quadrant 3
	quadrant := 3;
	alpha := ABS(gamma + pi/2);
	x1Box := xRobot - SIN(alpha) * breite;
	y1Box := yRobot - COS(alpha) * breite;
	x2Box := xRobot + COS(alpha + beta) * diagonal;
	y2Box := yRobot - SIN(alpha + beta) * diagonal;
	x3Box := xRobot + SIN(alpha + beta) * diagonal;
	y3Box := yRobot + COS(alpha + beta) * diagonal;
	x4Box := xRobot + SIN(alpha) * breite;
	y4Box := yRobot + COS(alpha) * breite;
ELSIF gamma >= -pi/2 AND gamma < 0 THEN //Quadrant 4
	quadrant := 4;
	alpha := gamma;
	x1Box := xRobot + COS(alpha) * breite;
	y1Box := yRobot - SIN(alpha) * breite;
	x2Box := xRobot + COS(alpha + beta) * diagonal;
	y2Box := yRobot + SIN(alpha + beta) * diagonal;
	x3Box := xRobot - COS(alpha + beta) * diagonal;
	y3Box := yRobot + SIN(alpha + beta) * diagonal;
	x4Box := xRobot - COS(alpha) * breite;
	y4Box := yRobot + SIN(alpha) * breite;
END_IF

//Finde alle aktiven Roboter im Feld
FOR j := 1 TO 5 BY 1 DO
	IF robotPoseArray[j].x <> 0 AND robotPoseArray[j].y <> 0 AND j <> robotNumber THEN
		robotActive[j] := j;
	END_IF
END_FOR

//Erkennt Roboter Kollision in Box?
FOR k := 1 TO 5 BY 1 DO
	IF robotActive [k] <> 0 THEN
		IF quadrant = 1 THEN
			IF robotPoseArray[robotActive[k]].x < x1Box AND robotPoseArray[robotActive[k]].x > x3Box AND robotPoseArray[robotActive[k]].y < y2Box AND robotPoseArray[robotActive[k]].y > y4Box THEN
				collisionDetected := TRUE;
			END_IF
		ELSIF quadrant = 2 THEN
			IF robotPoseArray[robotActive[k]].x < x4Box AND robotPoseArray[robotActive[k]].x > x2Box AND robotPoseArray[robotActive[k]].y < y1Box AND robotPoseArray[robotActive[k]].y > y3Box THEN
				collisionDetected := TRUE;
			END_IF
		ELSIF quadrant = 3 THEN
			IF robotPoseArray[robotActive[k]].x < x3Box AND robotPoseArray[robotActive[k]].x > x1Box AND robotPoseArray[robotActive[k]].y < y4Box AND robotPoseArray[robotActive[k]].y > y2Box THEN
				collisionDetected := TRUE;
			END_IF
		ELSIF quadrant = 4 THEN
			IF robotPoseArray[robotActive[k]].x < x2Box AND robotPoseArray[robotActive[k]].x > x4Box AND robotPoseArray[robotActive[k]].y < y3Box AND robotPoseArray[robotActive[k]].y > y1Box THEN
				collisionDetected := TRUE;
			END_IF
		END_IF
	END_IF
	
	IF collisionDetected = TRUE AND collide <> robotActive[k] THEN
		collide := robotActive[k];
		robotCollision[collide] := TRUE;
		collisionDetected := FALSE;
	END_IF
END_FOR

//TODO
//Besprechung mit Gewerk 3 über vx und vy. Werte sind nicht ausgegeben]]></ST>
    </Implementation>
    <LineIds Name="Kollisionserkennung">
      <LineId Id="22" Count="15" />
      <LineId Id="39" Count="2" />
      <LineId Id="177" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="42" Count="8" />
      <LineId Id="178" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="51" Count="8" />
      <LineId Id="179" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="61" Count="8" />
      <LineId Id="180" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="70" Count="13" />
      <LineId Id="85" Count="1" />
      <LineId Id="157" Count="3" />
      <LineId Id="181" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="198" Count="1" />
      <LineId Id="195" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="200" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="203" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="165" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="123" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>