<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Fahrauftrag" Id="{d11e2ac1-1df3-4b17-bdc0-8c45421bbbdd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Fahrauftrag //IMPLEMENTS TrajectoryControllable
VAR
	//State machine
	sStart : BOOL := TRUE;
	s0,s1a,s1b,s2,s3,s4,s5,s6a,s6b,s7,s8,s9,s10,s11a,s11b,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28,s29,s30,s31: BOOL := FALSE;
	
	AStar : AStar;
	readAssigment: ReadAssigment;
	TrajectoryController: TrajectoryControl;
	
	wayPointList : ARRAY[0..100] OF RobotPoseSimple;
	actualCamX, actualCamY : LREAL;
	
	//Schnittstelle zum MQTT_PRG
	FeedbackToGW1 AT%Q*: STRING(50);
	resetVar AT%Q*: BOOL;
	Auftrag AT%I*: Auftrag;
	StatusFromGW1 AT%I*: STRING(50);
	
	//Schnittstelle zu A*-Algorithmus
	EndNode AT%Q*: INT;						//letzter Knoten
	xEndvalue AT%Q*: LREAL;						//Ziel xKoordinate
	xRobotStartposition AT%Q*: LREAL;			//aktuelle xKoordinate
	yEndvalue AT%Q*: LREAL;						//Ziel yKoordinate
	yRobotStartposition AT%Q*: LREAL;			//aktuelle yKoordinate
	xPointList AT%I*: ARRAY[0..100] OF LREAL;	//xKoordinatenliste
	yPointList AT%I*: ARRAY[0..100] OF LREAL;	//yKoordinatenliste
	enable_ASearch AT%Q* : BOOL;				//enable signal for a search
	finished_ASearch AT%I* : BOOL;	 //TODO
	i: INT;
	zeile: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Camera damit immer Daten da:
IF camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x <> 0 AND camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y <> 0 THEN
	actualCamX := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	actualCamY := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;
END_IF
//Ablauf einer Fahrt:
//Init
IF sStart AND NOT s0 THEN
	sStart := 0; s0 := 1;
	//	RückmeldungGW1 Verfügbar
	FeedbackToGW1 := 'Verfuegbar';
	resetVar := FALSE;
END_IF
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////FAHRAUFTRAG/////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	Warten auf Auftrag
IF s0 AND NOT s1a AND Auftrag.Art = 'Fahrauftrag' THEN
	s0 := 0; s1a := 1;
	//	RückmeldugGW1 Auftrag angenommen setzt
	FeedbackToGW1 := 'Auftrag angenommen';
	//Auftrag auswerten
	readAssigment(assigment:= Auftrag);
	EndNode := readAssigment.endNodePickup;															//todo in matlab
	xEndvalue := readAssigment.pickupLocation.x;
	yEndvalue := readAssigment.pickupLocation.y;
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
END_IF

IF s1a AND NOT s1b AND xRobotStartposition <> 0 AND yRobotStartposition <> 0 THEN
	s1a := 0; s1b := 1;
	AStar(enable := TRUE, xRobotActual := xRobotStartposition, yRobotActual := yRobotStartposition, xEnd := xEndvalue, yEnd := yEndvalue, endNode := EndNode);
	finished_ASearch := AStar.finishedASearch;
	xPointList := AStar.xCoordinates;
	yPointList := AStar.yCoordinates;
ELSIF s1a AND NOT s1b THEN
	xRobotStartposition := actualCamX;
	yRobotStartposition := actualCamY;
END_IF

//Bahnplanung
IF s1b AND NOT s2 AND finished_ASearch THEN
	FOR i := 0 TO 100 BY 1 DO
 		wayPointList[i] := ToRobotPoseSimple(x:= xPointList[i], y:= yPointList[i], theta:= -1);
		IF xPointList[i] = 0 THEN
			zeile := i;
			EXIT;
		END_IF
	END_FOR
	wayPointList[zeile] := readAssigment.lastPointsToPickup[0];
	wayPointList[zeile+1] := readAssigment.lastPointsToPickup[1];
	wayPointList[zeile+2] := readAssigment.lastPointsToPickup[2];
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s1b := 0; s2 := 1;
END_IF

///////////////////////////////////////////////FahrtZumAbholort///////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s2 AND NOT s3 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s2 := 0; s3 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
	enable_ASearch := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s3 AND NOT s4 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s3 := 0; s4 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s4 AND NOT s5 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s4 := 0; s5 := 1;
	//	RückmeldungGW1 Auf Anfahrt setzen
	FeedbackToGW1 := 'Auf Anfahrt';
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s5 AND NOT s6a AND trajectoryController.yBoArrivedAtDestination THEN
	s5 := 0; s6a := 1;
	trajectoryController.xBoEnable := FALSE;
	//	Greifersteuerung
	Gripper.closeGripperCommand := TRUE;
END_IF
												// hier könnte noch slider und Lichtschranke abgefragt werden zur Sicherheit
IF s6a AND NOT s6b AND NOT Gripper.partGripped THEN
	s6a := 0; s6b := 1;	
	//	RückmeldungGW1 Teil aufgenommen setzen
	FeedbackToGW1 := 'Teil aufgenommen';
	//	Fahrauftrag zu Lesekopf
	TrajectoryController.setWaypointList(readAssigment.pointsFromSlotToReader);
	trajectoryController.newWaypointListAvailable := TRUE;
ELSIF s6a AND NOT s6b AND Gripper.partGripped THEN
	Gripper.closeGripperCommand := FALSE;
	wayPointList[0] := readAssigment.lastPointsToPickup[0];
	wayPointList[1] := readAssigment.lastPointsToPickup[1];
	wayPointList[2] := readAssigment.lastPointsToPickup[2];
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s6a := 0; s2 := 1;
END_IF


/////////////////////////////////////////////////////FahrtZumLesekopf/////////////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s6b AND NOT s7 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s6b := 0; s7 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s7 AND NOT s8 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s7 := 0; s8 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s8 AND NOT s9 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s8 := 0; s9 := 1;
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s9 AND NOT s10 AND trajectoryController.yBoArrivedAtDestination THEN
	s9 := 0; s10 := 1;
	trajectoryController.xBoEnable := FALSE;
	//	RückmeldungGW1 Abmeldung
	FeedbackToGW1 := 'Abmeldung';
END_IF

//	Warten auf Werkstück ausgelesen
IF s10 AND NOT s11a AND StatusFromGW1 = 'WerkstueckAusgelesen' THEN
	s10 := 0; s11a := 1;
	resetVar := TRUE;
	
	//Auftrag auswerten
	EndNode   := readAssigment.endNodeStorage;																	
	xEndvalue := readAssigment.storageLocation.x;
	yEndvalue := readAssigment.storageLocation.y;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
	IF readAssigment.assigment.AbholTasche < 3 THEN
		xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x - 200;
	ELSE
		xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x + 200;
	END_IF
END_IF

IF s11a AND NOT s11b AND xRobotStartposition <> 0 AND yRobotStartposition <> 0 THEN
	s11a := 0; s11b := 1;
	AStar(enable := TRUE, xRobotActual := xRobotStartposition, yRobotActual := yRobotStartposition, xEnd := xEndvalue, yEnd := yEndvalue, endNode := EndNode);
	finished_ASearch := AStar.finishedASearch;
	xPointList := AStar.xCoordinates;
	yPointList := AStar.yCoordinates;
ELSIF s11a AND NOT s11b THEN
	IF readAssigment.assigment.AbholTasche < 3 THEN	
		xRobotStartposition := actualCamX - 200;
	ELSE
		xRobotStartposition := actualCamX + 200;
	END_IF
	yRobotStartposition := actualCamY;
END_IF

//Bahnplanung
IF s11b AND NOT s12 AND finished_ASearch THEN
	FOR i := 0 TO 100 BY 1 DO
 		wayPointList[i] := ToRobotPoseSimple(x:= xPointList[i], y:= yPointList[i], theta:= -1);
		IF xPointList[i] = 0 THEN
			zeile := i;
			EXIT;
		END_IF
	END_FOR
	wayPointList[zeile] := readAssigment.lastPointsToStorage[0];
	wayPointList[zeile+1] := readAssigment.lastPointsToStorage[1];
	wayPointList[zeile+2] := readAssigment.lastPointsToStorage[2];
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s11b := 0; s12 := 1;
END_IF

/////////////////////////////////////////////////FahrtZurAblageStation///////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s12 AND NOT s13 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s12 := 0; s13 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
	enable_ASearch := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s13 AND NOT s14 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s13 := 0; s14 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s14 AND NOT s15 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s14 := 0; s15 := 1;
	resetVar := FALSE;
	//	RückmeldungGW1 Auf Anfahrt setzen
	FeedbackToGW1 := 'Auf Transport';
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s15 AND NOT s16 AND trajectoryController.yBoArrivedAtDestination THEN
	s15 := 0; s16 := 1;
	trajectoryController.xBoEnable := FALSE;
	//	RückmeldungGW1 Anmeldung
	FeedbackToGW1 := 'Anmeldung';
END_IF

//	Warten auf Werkstück ausgelesen
IF s16 AND NOT s17 AND StatusFromGW1 = 'WerkstueckAusgelesen' THEN
	s16 := 0; s17 := 1;
	resetVar := TRUE;
	//	Fahrauftrag zur Ablage
	TrajectoryController.setWaypointList(readAssigment.pointsFromReaderToSlot);
	trajectoryController.newWaypointListAvailable := TRUE;
END_IF

//////////////////////////////////////////////////FahrtZurAblage///////////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s17 AND NOT s18 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s17 := 0; s18 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s18 AND NOT s19 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s18 := 0; s19 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s19 AND NOT s20 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s19 := 0; s20 := 1;
	resetVar := FALSE;
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s20 AND NOT s21 AND trajectoryController.yBoArrivedAtDestination THEN
	s20 := 0; //s21 := 1;
	trajectoryController.xBoEnable := FALSE;
	//	Greifersteuerung
	Gripper.closeGripperCommand := FALSE;																	//----------todo
	//	RückmeldungGW1 Teil abgelegt
	FeedbackToGW1 := 'Teil abgelegt';
	//	Fahrauftrag zum Parkplatz
	EndNode := 17;															//todo in matlab
	xEndvalue := readAssigment.parkingSlots[Var_HAWIno.Robot_Number].x;
	yEndvalue := readAssigment.parkingSlots[Var_HAWIno.Robot_Number].y;
	IF readAssigment.assigment.AbholTasche < 3 THEN
		xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x - 200;
	ELSE
		xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x + 200;
	END_IF
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
	enable_ASearch := TRUE;
END_IF

				
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////LADEAUFTRAG////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF s0 AND NOT s26 AND Auftrag.Art = 'Ladeauftrag' THEN
s0 := 0; s26 := 1;
	//	RückmeldugGW1 Auftrag angenommen setzt
	FeedbackToGW1 := 'Auftrag angenommen';
	//Auftrag auswerten
	readAssigment(assigment:= Auftrag);
	EndNode := 106;															//todo in matlab
	xEndvalue := readAssigment.chargingLocation.x;
	yEndvalue := readAssigment.chargingLocation.y;
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
	enable_ASearch := TRUE;
END_IF

//Bahnplanung
IF s26 AND NOT s27 AND finished_ASearch THEN
	FOR i := 0 TO 100 BY 1 DO
 		wayPointList[i] := ToRobotPoseSimple(x:= xPointList[i], y:= yPointList[i], theta:= -1);
		IF xPointList[i] = 0 THEN
			zeile := i;
			EXIT;
		END_IF
	END_FOR
	wayPointList[zeile] := readAssigment.lastPointsToCharging[0];
	wayPointList[zeile+1] := readAssigment.lastPointsToCharging[1];
	wayPointList[zeile+2] := readAssigment.lastPointsToCharging[2];
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s26 := 0; s27 := 1;
END_IF

///////////////////////////////////////////////FahrtZurStation///////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s27 AND NOT s28 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s27 := 0; s28 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
	enable_ASearch := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s28 AND NOT s29 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s28 := 0; s29 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s29 AND NOT s30 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s29 := 0; s30 := 1;
	//	RückmeldungGW1 Auf Anfahrt setzen
	FeedbackToGW1 := 'Auf Anfahrt';
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s30 AND NOT s31 AND trajectoryController.yBoArrivedAtDestination THEN
	s30 := 0; s31 := 1;
	trajectoryController.xBoEnable := FALSE;
	//	RückmeldungGW1 Teil aufgenommen setzen
	FeedbackToGW1 := 'An Ladestation';
END_IF

IF s31 AND NOT s21 AND StatusFromGW1 = 'Fertig geladen' THEN
	s31 := 0; s21 := 1;
	//	Fahrauftrag zum Parkplatz
	EndNode := 17;															//todo in matlab
	xEndvalue := readAssigment.parkingSlots[Var_HAWIno.Robot_Number].x;
	yEndvalue := readAssigment.parkingSlots[Var_HAWIno.Robot_Number].y;
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
	enable_ASearch := TRUE;
END_IF


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////Parkplatzanfahrt///////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Bahnplanung
IF s21 AND NOT s22 AND finished_ASearch THEN
	FOR i := 0 TO 100 BY 1 DO
 		wayPointList[i] := ToRobotPoseSimple(x:= xPointList[i], y:= yPointList[i], theta:= -1);
		IF xPointList[i] = 0 THEN
			zeile := i;
			EXIT;
		END_IF
	END_FOR
	wayPointList[zeile] := ToRobotPoseSimple(x := -1, y := -1, theta := -1);
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s21 := 0; s22 := 1;
END_IF


///////////////////////////////////////////////////FahrtZumParkplatz////////////////////////////////////////////////////////
 
// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s22 AND NOT s23 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s22 := 0; s23 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s23 AND NOT s24 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s23 := 0; s24 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s24 AND NOT s25 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s24 := 0; s25 := 1;
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s25 AND NOT s0 AND trajectoryController.yBoArrivedAtDestination THEN
	s25 := 0; s0 := 1;
	trajectoryController.xBoEnable := FALSE;
	//	RückmeldungGW1 Verfügbar
	FeedbackToGW1 := 'Verfuegbar';
END_IF

]]></ST>
    </Implementation>
    <LineIds Name="Fahrauftrag">
      <LineId Id="999" Count="2" />
      <LineId Id="1003" Count="0" />
      <LineId Id="1002" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="796" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="92" Count="1" />
      <LineId Id="427" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="422" Count="4" />
      <LineId Id="91" Count="0" />
      <LineId Id="983" Count="0" />
      <LineId Id="982" Count="0" />
      <LineId Id="984" Count="0" />
      <LineId Id="1087" Count="3" />
      <LineId Id="987" Count="2" />
      <LineId Id="985" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="531" Count="1" />
      <LineId Id="557" Count="2" />
      <LineId Id="556" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="549" Count="1" />
      <LineId Id="554" Count="0" />
      <LineId Id="552" Count="1" />
      <LineId Id="555" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="263" Count="4" />
      <LineId Id="262" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="261" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="1006" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="354" Count="1" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1019" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1015" Count="2" />
      <LineId Id="1013" Count="0" />
      <LineId Id="1011" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="270" Count="13" />
      <LineId Id="286" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="350" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="204" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="565" Count="2" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1094" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="1095" Count="2" />
      <LineId Id="141" Count="0" />
      <LineId Id="992" Count="2" />
      <LineId Id="1091" Count="2" />
      <LineId Id="995" Count="2" />
      <LineId Id="1104" Count="0" />
      <LineId Id="1106" Count="1" />
      <LineId Id="1105" Count="0" />
      <LineId Id="998" Count="0" />
      <LineId Id="991" Count="0" />
      <LineId Id="608" Count="1" />
      <LineId Id="611" Count="13" />
      <LineId Id="607" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="298" Count="3" />
      <LineId Id="572" Count="0" />
      <LineId Id="302" Count="10" />
      <LineId Id="399" Count="0" />
      <LineId Id="313" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="351" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="161" Count="1" />
      <LineId Id="205" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="358" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="316" Count="13" />
      <LineId Id="402" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="352" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="943" Count="2" />
      <LineId Id="1100" Count="3" />
      <LineId Id="946" Count="1" />
      <LineId Id="361" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="657" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="794" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="730" Count="13" />
      <LineId Id="745" Count="41" />
      <LineId Id="789" Count="1" />
      <LineId Id="729" Count="0" />
      <LineId Id="800" Count="0" />
      <LineId Id="799" Count="0" />
      <LineId Id="801" Count="0" />
      <LineId Id="804" Count="0" />
      <LineId Id="870" Count="7" />
      <LineId Id="802" Count="0" />
      <LineId Id="896" Count="3" />
      <LineId Id="901" Count="41" />
      <LineId Id="900" Count="0" />
      <LineId Id="728" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>