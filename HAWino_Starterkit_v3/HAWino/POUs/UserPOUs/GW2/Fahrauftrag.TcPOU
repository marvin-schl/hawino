<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Fahrauftrag" Id="{d11e2ac1-1df3-4b17-bdc0-8c45421bbbdd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Fahrauftrag
VAR
	//State machine
	sStart : BOOL := TRUE;
	s0,s1a,s1b,s2,s3,s4,s5,s6a,s6b,s7,s8,s9,s10,s11a,s11b,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21a,s21b,s22,s23,s24,s25,s26a,s26b,s27,s28,s29,s30,s31: BOOL := FALSE;
	
	AStar : AStar;										//A-Stern Algorithmus
	readAssigment: ReadAssigment;						//Auswertung des Auftrags
	TrajectoryController: TrajectoryControl;			//Schnittstelle zu GW3
	
	reset: BOOL := FALSE;								//Fahrauftrag auf Anfang
	wayPointList : ARRAY[0..100] OF RobotPoseSimple;	//Wegpunktliste
	actualCamX, actualCamY : LREAL;						//letzte Kameradaten ungleich 0
	lastRelevantStateForCollision : STRING(5);			//letzter State für Rückfall bei Kollision
	
	//Schnittstelle zum MQTT_PRG
	FeedbackToGW1 AT%Q*: STRING(50);		//Feedback/Status des Roboters an GW1
	resetVar AT%Q*: BOOL;					//messages von MQTT zurücksetzen
	Auftrag AT%I*: Auftrag;					//Auftrag von GW1
	StatusFromGW1 AT%I*: STRING(50);		//Status von GW1
	
	//Schnittstelle zu A*-Algorithmus
	EndNode : INT;							//letzter Knoten
	xEndvalue : LREAL;						//Ziel xKoordinate
	xRobotStartposition : LREAL;			//aktuelle xKoordinate
	yEndvalue : LREAL;						//Ziel yKoordinate
	yRobotStartposition : LREAL;			//aktuelle yKoordinate
	xPointList : ARRAY[0..100] OF LREAL;	//xKoordinatenliste
	yPointList : ARRAY[0..100] OF LREAL;	//yKoordinatenliste
	finished_ASearch : BOOL;	 			//Variable, dass Algorithmus fertig
	i: INT;									//Laufvariable zum Übertragen der x und y Koordinaten in die Wegpunktliste
	zeile: INT;								//Arrayindex, wo Wegpunktliste zuende
	
	//Kollision
	collision AT%I*: ARRAY[1..5] OF BOOL;
	lastCollision: ARRAY [1..5] OF BOOL;
	//CollisionSolution : CollisionSolution;
	collisionFree : BOOL := FALSE;
	removeNodeCollision : ARRAY[1..11] OF INT;
	todo : STRING(10);
	
	//nur testen
	test: BOOL := false;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[collisionFree := NOT collision[Var_HAWIno.Robot_Number];

//neue Kollision angekommen oder noch alte?
IF lastCollision[1] <> collision[1] OR lastCollision[2] <> collision[2] OR lastCollision[3] <> collision[3] OR lastCollision[4] <> collision[4] OR lastCollision[5] <> collision[5] THEN
	IF collision[Var_HAWIno.Robot_Number] THEN
		TrajectoryController.xBoEnable := FALSE;
		CollisionSolution();
	END_IF
	lastCollision := collision;
ELSIF todo = 'Warten' AND collisionFree THEN
	CollisionSolution();	
END_IF

//Camera damit immer Daten da:
IF camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x <> 0 AND camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y <> 0 THEN
	actualCamX := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	actualCamY := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;
END_IF

//Ablauf einer Fahrt:
//Init
IF sStart AND NOT s0 THEN
	lastRelevantStateForCollision := 's0';
	sStart := 0; s0 := 1;
	//	RückmeldungGW1 Verfügbar
	FeedbackToGW1 := 'Verfuegbar';
	resetVar := FALSE;
	TrajectoryController.xBoReset := FALSE;
END_IF

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////FAHRAUFTRAG/////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	Warten auf Auftrag
IF s0 AND NOT s1a AND Auftrag.Art = 'Fahrauftrag' THEN
	s0 := 0; s1a := 1;
	lastRelevantStateForCollision := 's1a';
	//	RückmeldugGW1 Auftrag angenommen setzt
	FeedbackToGW1 := 'Auftrag angenommen';
	//Auftrag auswerten
	readAssigment(assigment:= Auftrag);
	EndNode := readAssigment.endNodePickup;															
	xEndvalue := readAssigment.pickupLocation.x;
	yEndvalue := readAssigment.pickupLocation.y;
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
END_IF

IF s1a AND NOT s1b AND xRobotStartposition <> 0 AND yRobotStartposition <> 0 THEN
	s1a := 0; s1b := 1;
	AStar(xRobotActual := xRobotStartposition, yRobotActual := yRobotStartposition, xEnd := xEndvalue, yEnd := yEndvalue, endNode := EndNode, blockedNodes := removeNodeCollision);
	finished_ASearch := AStar.finishedASearch;
	xPointList := AStar.xCoordinates;
	yPointList := AStar.yCoordinates;
ELSIF s1a AND NOT s1b THEN
	xRobotStartposition := actualCamX;
	yRobotStartposition := actualCamY;
END_IF

//Bahnplanung
IF s1b AND NOT s2 AND finished_ASearch THEN
	ZEROS_RobotPoseSimple(wayPointList);
	FOR i := 0 TO 100 BY 1 DO
 		wayPointList[i] := ToRobotPoseSimple(x:= xPointList[i], y:= yPointList[i], theta:= -1);
		IF xPointList[i] = 0 THEN
			zeile := i;
			EXIT;
		END_IF
	END_FOR
	wayPointList[zeile] := readAssigment.pickupLocation;
	wayPointList[zeile+1] := ToRobotPoseSimple(x := -1, y := -1, theta := -1);
	//wayPointList[zeile+2] := readAssigment.lastPointsToPickup[2];
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s1b := 0; s2 := 1;
END_IF

///////////////////////////////////////////////FahrtZumAbholort///////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s2 AND NOT s3 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s2 := 0; s3 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s3 AND NOT s4 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s3 := 0; s4 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s4 AND NOT s5 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s4 := 0; s5 := 1;
	//	RückmeldungGW1 Auf Anfahrt setzen
	FeedbackToGW1 := 'Auf Anfahrt';
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s5 AND NOT s6a AND trajectoryController.yBoArrivedAtDestination THEN
	s5 := 0; s6a := 1;
	lastRelevantStateForCollision := 's6a';
	trajectoryController.xBoEnable := FALSE;
	//	Greifersteuerung
	Gripper.closeGripperCommand := TRUE;
END_IF
												// hier könnte noch slider und Lichtschranke abgefragt werden zur Sicherheit
IF s6a AND NOT s6b AND NOT Gripper.partGripped THEN
	s6a := 0; s6b := 1;	
	//	RückmeldungGW1 Teil aufgenommen setzen
	FeedbackToGW1 := 'Teil aufgenommen';
	//	Fahrauftrag zu Lesekopf
	TrajectoryController.setWaypointList(readAssigment.pointsFromSlotToReader);
	trajectoryController.newWaypointListAvailable := TRUE;
ELSIF s6a AND NOT s6b AND Gripper.partGripped THEN
	Gripper.closeGripperCommand := FALSE;
	ZEROS_RobotPoseSimple(wayPointList);										//test, sonst für alle
	wayPointList[0] := ToRobotPoseSimple(x := readAssigment.pickupLocation.x - 100, y := readAssigment.pickupLocation.y, theta := readAssigment.pickupLocation.theta);
	wayPointList[1] := readAssigment.pickupLocation;
	wayPointList[2] := ToRobotPoseSimple(x := -1, y := -1, theta := -1);
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s6a := 0; s2 := 1;
END_IF


/////////////////////////////////////////////////////FahrtZumLesekopf/////////////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s6b AND NOT s7 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s6b := 0; s7 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s7 AND NOT s8 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s7 := 0; s8 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s8 AND NOT s9 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s8 := 0; s9 := 1;
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s9 AND NOT s10 AND trajectoryController.yBoArrivedAtDestination THEN
	s9 := 0; s10 := 1;
	lastRelevantStateForCollision := 's10';
	trajectoryController.xBoEnable := FALSE;
	//	RückmeldungGW1 Abmeldung
	FeedbackToGW1 := 'Abmeldung';
END_IF

//	Warten auf Werkstück ausgelesen
IF s10 AND NOT s11a AND StatusFromGW1 = 'WerkstueckAusgelesen' THEN
	s10 := 0; s11a := 1;
	lastRelevantStateForCollision := 's11a';
	resetVar := TRUE;
	
	//Auftrag auswerten
	EndNode   := readAssigment.endNodeStorage;																	
	xEndvalue := readAssigment.storageLocation.x;
	yEndvalue := readAssigment.storageLocation.y;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	//IF readAssigment.assigment.AbholTasche < 3 THEN
	//	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x - 200;
	//ELSE
	//	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x + 200;
	//END_IF
END_IF

IF s11a AND NOT s11b AND xRobotStartposition <> 0 AND yRobotStartposition <> 0 THEN
	s11a := 0; s11b := 1;
	AStar(xRobotActual := xRobotStartposition, yRobotActual := yRobotStartposition, xEnd := xEndvalue, yEnd := yEndvalue, endNode := EndNode, blockedNodes := removeNodeCollision);
	finished_ASearch := AStar.finishedASearch;
	xPointList := AStar.xCoordinates;
	yPointList := AStar.yCoordinates;
ELSIF s11a AND NOT s11b THEN
	//IF readAssigment.assigment.AbholTasche < 3 THEN	
	//	xRobotStartposition := actualCamX - 200;
	//ELSE
	//	xRobotStartposition := actualCamX + 200;
	//END_IF
	xRobotStartposition := actualCamX;
	yRobotStartposition := actualCamY;
END_IF

//Bahnplanung
IF s11b AND NOT s12 AND finished_ASearch THEN
	ZEROS_RobotPoseSimple(wayPointList);
	FOR i := 0 TO 100 BY 1 DO
 		wayPointList[i] := ToRobotPoseSimple(x:= xPointList[i], y:= yPointList[i], theta:= -1);
		IF xPointList[i] = 0 THEN
			zeile := i;
			EXIT;
		END_IF
	END_FOR
	wayPointList[zeile] := readAssigment.readerCheckIn;
	wayPointList[zeile+1] := ToRobotPoseSimple(x := -1, y := -1, theta := -1);
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s11b := 0; s12 := 1;
END_IF

/////////////////////////////////////////////////FahrtZurAblageStation///////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s12 AND NOT s13 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s12 := 0; s13 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s13 AND NOT s14 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s13 := 0; s14 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s14 AND NOT s15 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s14 := 0; s15 := 1;
	resetVar := FALSE;
	//	RückmeldungGW1 Auf Anfahrt setzen
	FeedbackToGW1 := 'Auf Transport';
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s15 AND NOT s16 AND trajectoryController.yBoArrivedAtDestination THEN
	s15 := 0; s16 := 1;
	lastRelevantStateForCollision := 's16';	
	trajectoryController.xBoEnable := FALSE;
	//	RückmeldungGW1 Anmeldung
	FeedbackToGW1 := 'Anmeldung';
END_IF

//	Warten auf Werkstück ausgelesen
IF s16 AND NOT s17 AND StatusFromGW1 = 'WerkstueckAusgelesen' THEN
	s16 := 0; s17 := 1;
	lastRelevantStateForCollision := 's17';
	resetVar := TRUE;
	//	Fahrauftrag zur Ablage
	TrajectoryController.setWaypointList(readAssigment.pointsFromReaderToSlot);
	trajectoryController.newWaypointListAvailable := TRUE;
END_IF

//////////////////////////////////////////////////FahrtZurAblage///////////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s17 AND NOT s18 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s17 := 0; s18 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s18 AND NOT s19 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s18 := 0; s19 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s19 AND NOT s20 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s19 := 0; s20 := 1;
	resetVar := FALSE;
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s20 AND NOT s21a AND trajectoryController.yBoArrivedAtDestination THEN
	s20 := 0; s21a := 1;
	lastRelevantStateForCollision := 's21a';
	trajectoryController.xBoEnable := FALSE;
	//	Greifersteuerung
	Gripper.closeGripperCommand := FALSE;
	//	RückmeldungGW1 Teil abgelegt
	FeedbackToGW1 := 'Teil abgelegt';
	//	Fahrauftrag zum Parkplatz
	EndNode := readAssigment.endNodeParking[Var_HAWIno.Robot_Number];															//todo in matlab
	xEndvalue := readAssigment.parkingSlots[Var_HAWIno.Robot_Number].x;
	yEndvalue := readAssigment.parkingSlots[Var_HAWIno.Robot_Number].y;
	//IF readAssigment.assigment.AblageTasche < 3 THEN
	//	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x - 200;
	//ELSE
	//	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x + 200;
	//END_IF
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
END_IF

				
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////LADEAUFTRAG////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF s0 AND NOT s26a AND Auftrag.Art = 'Ladeauftrag' THEN
	s0 := 0; s26a := 1;
	lastRelevantStateForCollision := 's26a';
	//	RückmeldugGW1 Auftrag angenommen setzt
	FeedbackToGW1 := 'Auftrag angenommen';
	//Auftrag auswerten
	readAssigment(assigment:= Auftrag);
	EndNode := readAssigment.endNodeCharging;
	xEndvalue := readAssigment.chargingLocation.x;
	yEndvalue := readAssigment.chargingLocation.y;
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
END_IF

IF s26a AND NOT s26b AND xRobotStartposition <> 0 AND yRobotStartposition <> 0 THEN
	s26a := 0; s26b := 1;
	AStar(xRobotActual := xRobotStartposition, yRobotActual := yRobotStartposition, xEnd := xEndvalue, yEnd := yEndvalue, endNode := EndNode, blockedNodes := removeNodeCollision);
	finished_ASearch := AStar.finishedASearch;
	xPointList := AStar.xCoordinates;
	yPointList := AStar.yCoordinates;
ELSIF s26a AND NOT s26b THEN
	xRobotStartposition := actualCamX;
	yRobotStartposition := actualCamY;
END_IF

//Bahnplanung
IF s26b AND NOT s27 AND finished_ASearch THEN
	ZEROS_RobotPoseSimple(wayPointList);
	FOR i := 0 TO 100 BY 1 DO
 		wayPointList[i] := ToRobotPoseSimple(x:= xPointList[i], y:= yPointList[i], theta:= -1);
		IF xPointList[i] = 0 THEN
			zeile := i;
			EXIT;
		END_IF
	END_FOR
	wayPointList[zeile] := readAssigment.chargingLocation;
	wayPointList[zeile+1] := ToRobotPoseSimple(x := -1, y := -1, theta := -1);
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	resetVar := TRUE;															//testen
	s26b := 0; s27 := 1;
END_IF

///////////////////////////////////////////////FahrtZurStation///////////////////////////////////////////////////

// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s27 AND NOT s28 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s27 := 0; s28 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s28 AND NOT s29 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s28 := 0; s29 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s29 AND NOT s30 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s29 := 0; s30 := 1;
	//	RückmeldungGW1 Auf Anfahrt setzen
	FeedbackToGW1 := 'Auf Anfahrt';
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s30 AND NOT s31 AND trajectoryController.yBoArrivedAtDestination THEN
	s30 := 0; s31 := 1;
	lastRelevantStateForCollision := 's31';
	trajectoryController.xBoEnable := FALSE;
	resetVar := FALSE;															//testen
	//	RückmeldungGW1 Teil aufgenommen setzen
	FeedbackToGW1 := 'An Ladestation';
END_IF

IF s31 AND NOT s21a AND StatusFromGW1 = 'FertigGeladen' THEN
	s31 := 0; s21a := 1;
	lastRelevantStateForCollision := 's21a';
	//	Fahrauftrag zum Parkplatz
	EndNode := readAssigment.endNodeParking[Var_HAWIno.Robot_Number];															
	xEndvalue := readAssigment.parkingSlots[Var_HAWIno.Robot_Number].x;
	yEndvalue := readAssigment.parkingSlots[Var_HAWIno.Robot_Number].y;
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
END_IF


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////Parkplatzanfahrt///////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF s21a AND NOT s21b AND xRobotStartposition <> 0 AND yRobotStartposition <> 0 THEN
	s21a := 0; s21b := 1;
	AStar(xRobotActual := xRobotStartposition, yRobotActual := yRobotStartposition, xEnd := xEndvalue, yEnd := yEndvalue, endNode := EndNode, blockedNodes := removeNodeCollision);
	finished_ASearch := AStar.finishedASearch;
	xPointList := AStar.xCoordinates;
	yPointList := AStar.yCoordinates;
ELSIF s21a AND NOT s21b THEN
	//IF readAssigment.assigment.AbholTasche < 3 THEN	
	//	xRobotStartposition := actualCamX - 200;
	//ELSE
	//	xRobotStartposition := actualCamX + 200;
	//END_IF
	xRobotStartposition := actualCamX;
	yRobotStartposition := actualCamY;
END_IF

//Bahnplanung
IF s21b AND NOT s22 AND finished_ASearch THEN
	ZEROS_RobotPoseSimple(wayPointList);
	FOR i := 0 TO 100 BY 1 DO
 		wayPointList[i] := ToRobotPoseSimple(x:= xPointList[i], y:= yPointList[i], theta:= -1);
		IF xPointList[i] = 0 THEN
			zeile := i;
			EXIT;
		END_IF
	END_FOR
	wayPointList[zeile] := ToRobotPoseSimple(x := -1, y := -1, theta := -1);
	TrajectoryController.setWaypointList(waypointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	s21b := 0; s22 := 1;
END_IF


///////////////////////////////////////////////////FahrtZumParkplatz////////////////////////////////////////////////////////
 
// 	RückmeldungGW3 Wegpunkte erhalten abwarten
IF s22 AND NOT s23 AND trajectoryController.yControllerState = ControllerState.setTrajectory THEN
	s22 := 0; s23 := 1;
	trajectoryController.newWaypointListAvailable := FALSE;
END_IF

// 	RückmeldungGW3 ready abwarten
IF s23 AND NOT s24 AND trajectoryController.yControllerState = ControllerState.ready THEN
	s23 := 0; s24 := 1;
	trajectoryController.xBoEnable := TRUE;
END_IF
	
//	RückmeldungGW3 Fahrt abwarten
IF s24 AND NOT s25 AND trajectoryController.yControllerState = ControllerState.driving THEN
	s24 := 0; s25 := 1;
END_IF

//	RückmeldungGW3 am Ziel abwarten
IF s25 AND NOT s0 AND trajectoryController.yBoArrivedAtDestination THEN
	s25 := 0; s0 := 1;
	lastRelevantStateForCollision := 's0';
	trajectoryController.xBoEnable := FALSE;
	//	RückmeldungGW1 Verfügbar
	FeedbackToGW1 := 'Verfuegbar';
END_IF

//reset für test zwecke
IF reset THEN
	doReset();
	IF Auftrag.Art = '' AND (trajectoryController.yControllerState = ControllerState.idle OR trajectoryController.yControllerState = ControllerState.ready) THEN
		//reset zurücksetzen
		reset := FALSE;
	END_IF
END_IF]]></ST>
    </Implementation>
    <Method Name="CollisionSolution" Id="{4b28bc3d-12ae-4013-b4ca-5ace32b6b8ab}">
      <Declaration><![CDATA[METHOD CollisionSolution : BOOL
VAR_INPUT
END_VAR
VAR
	lastCollision : ARRAY[1..5] OF BOOL;
	roboNmb, nmb, n : INT;
	i : INT := 1;
	otherRobo : ARRAY[1..4] OF INT;
	otherRoboAtStop : bool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//wenn Zielknoten gelöscht wird weil Roboter im Weg steht, dann paar Schritte zurückfahren und dem anderen Platz machen...

//gestoppt
//alle States zurücknehmen
removeAllToken();
i := 1;
	
//rausfinden welche Roboter beteiligt
FOR nmb := 1 TO 5 BY 1 DO
	IF collision[nmb] AND nmb <> Var_HAWIno.Robot_Number THEN
		otherRobo[i] := nmb;
		i := i + 1;
	END_IF
END_FOR

//Anderer Roboter auf Parkplatz
IF camera.cameraData.robotPositionArray[otherRobo[1]].x > 7000 AND camera.cameraData.robotPositionArray[otherRobo[1]].x < 7200  THEN
	otherRoboAtStop := TRUE;
END_IF

//Anderer Roboter an Ladestation
IF camera.cameraData.robotPositionArray[otherRobo[1]].x > 6100 AND camera.cameraData.robotPositionArray[otherRobo[1]].x < 6800 AND camera.cameraData.robotPositionArray[otherRobo[1]].y > 3400 AND camera.cameraData.robotPositionArray[otherRobo[1]].y < 3600  THEN
	otherRoboAtStop := TRUE;
END_IF
	
IF NOT collisionFree THEN
	todo := 'Warten';

	//darf ich fahren? nur wenn kleinere Roboternummer
	FOR n := 1 TO 4 BY 1 DO
		IF otherRobo[n] > Var_HAWIno.Robot_Number THEN
			todo := 'Fahren';
		END_IF
	END_FOR
END_IF
	
//höhrer Priorität
IF todo = 'Fahren' THEN
	//update removeNode
	findNodesToRemove(collisionRobo := otherRobo, xPositionCollisionRobo := 4000, yPositionCollisionRobo := 1404);
	
	//in richtigen State zurück zum neuplanen und weiterfahren
	xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
	yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
	continueAfterCollision();
	todo := '';
	
ELSIF todo = 'Warten' THEN
	IF collisionFree OR otherRoboAtStop THEN
		xRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x;
		yRobotStartposition := camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y;	
		continueAfterCollision();
		todo := '';
	END_IF
END_IF


//TODO
// wenn schon einer zwischen Stationen bekommt Roboter nummer 10 und muss immer warten - interne Kollision
]]></ST>
      </Implementation>
    </Method>
    <Method Name="continueAfterCollision" Id="{bdb23939-8772-4122-86ab-be757c2f916b}">
      <Declaration><![CDATA[METHOD continueAfterCollision : BOOL
VAR_INPUT
END_VAR
VAR
	diffToList : ARRAY[0..100] OF LREAL;
	sortedDiff : ARRAY[0..100,1..2] OF LREAL;
	nextIndex, j, n, l, i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF lastRelevantStateForCollision = 's0' THEN
	s0 := 1;
ELSIF lastRelevantStateForCollision = 's1a' THEN
	s1a := 1;
ELSIF lastRelevantStateForCollision = 's6a' THEN
	s6b := 1;
	//readAssigment.pointsFromSlotToReader
	
	FOR i := 0 TO 10 BY 1 DO
		IF readAssigment.pointsFromSlotToReader[i].x <> 0 AND readAssigment.pointsFromSlotToReader[i].y <> -1 THEN
			//Abstände Roboter zu Wegpunkten
			diffToList[i] := SQRT(EXPT(camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x - readAssigment.pointsFromSlotToReader[i].x,2) + EXPT(camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y - readAssigment.pointsFromSlotToReader[i].y,2));
			FOR n := 0 TO 10 BY 1 DO
				IF diffToList[i] < sortedDiff[n,2] THEN
					FOR l := 9 TO n BY -1 DO
						sortedDiff[l+1,1] := sortedDiff[l,1];
						sortedDiff[l+1,2] := sortedDiff[l,2];
					END_FOR
					sortedDiff[n,2] := diffToList[i];
					sortedDiff[n,1] := i;
					EXIT;
				ELSIF i = 0 THEN
					sortedDiff[0,2] := diffToList[0];
					sortedDiff[0,1] := 0;
					EXIT;
				END_IF
			END_FOR
		END_IF	
	END_FOR
	
	ZEROS_RobotPoseSimple(wayPointList);
	nextIndex := LREAL_TO_INT(MAX(sortedDiff[0,1],sortedDiff[1,1]));
	
	FOR i := 0 TO 100 - nextIndex BY 1 DO 
		wayPointList[i] := readAssigment.pointsFromSlotToReader[nextIndex + i];
	END_FOR 
	TrajectoryController.setWaypointList(wayPointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	
ELSIF lastRelevantStateForCollision = 's10' THEN
	s10 := 1;
ELSIF lastRelevantStateForCollision = 's11a' THEN
	s11a := 1;
ELSIF lastRelevantStateForCollision = 's16' THEN
	s16 := 1;
ELSIF lastRelevantStateForCollision = 's17' THEN
	s17 := 1;
	//readAssigment.pointsFromReaderToSlot
	
	FOR i := 0 TO 10 BY 1 DO
		IF readAssigment.pointsFromReaderToSlot[i].x <> 0 AND readAssigment.pointsFromReaderToSlot[i].y <> -1 THEN
			//Abstände Roboter zu Wegpunkten
			diffToList[i] := SQRT(EXPT(camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].x - readAssigment.pointsFromReaderToSlot[i].x,2) + EXPT(camera.cameraData.robotPositionArray[Var_HAWIno.Robot_Number].y - readAssigment.pointsFromReaderToSlot[i].y,2));
			FOR n := 0 TO 10 BY 1 DO
				IF diffToList[i] < sortedDiff[n,2] THEN
					FOR l := 9 TO n BY -1 DO
						sortedDiff[l+1,1] := sortedDiff[l,1];
						sortedDiff[l+1,2] := sortedDiff[l,2];
					END_FOR
					sortedDiff[n,2] := diffToList[i];
					sortedDiff[n,1] := i;
					EXIT;
				ELSIF i = 0 THEN
					sortedDiff[0,2] := diffToList[0];
					sortedDiff[0,1] := 0;
					EXIT;
				END_IF
			END_FOR
		END_IF	
	END_FOR
	
	ZEROS_RobotPoseSimple(wayPointList);
	nextIndex := LREAL_TO_INT(MAX(sortedDiff[0,1],sortedDiff[1,1]));
	
	FOR i := 0 TO 100 - nextIndex BY 1 DO 
		wayPointList[i] := readAssigment.pointsFromReaderToSlot[nextIndex + i];
	END_FOR 
	TrajectoryController.setWaypointList(wayPointList);
	trajectoryController.newWaypointListAvailable := TRUE;
	
ELSIF lastRelevantStateForCollision = 's21a' THEN
	s21a := 1;
ELSIF lastRelevantStateForCollision = 's26a' THEN
	s26a := 1;
ELSIF lastRelevantStateForCollision = 's31' THEN
	s31 := 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="doReset" Id="{11fc1a94-8006-4f54-bbc3-6cfe2505c8b8}">
      <Declaration><![CDATA[METHOD doReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Statemaschine zurücksetzen
sStart := TRUE;
s0 := FALSE;
s1a := FALSE;
s1b := FALSE;
s2 := FALSE;
s3 := FALSE;
s4 := FALSE;
s5 := FALSE;
s6a := FALSE;
s6b := FALSE;
s7 := FALSE;
s8 := FALSE;
s9 := FALSE;
s10 := FALSE;
s11a := FALSE;
s11b := FALSE;
s12 := FALSE;
s13 := FALSE;
s14 := FALSE;
s15 := FALSE;
s16 := FALSE;
s17 := FALSE;
s18 := FALSE;
s19 := FALSE;
s20 := FALSE;
s21a := FALSE;
s21b := FALSE;
s22 := FALSE;
s23 := FALSE;
s24 := FALSE;
s25 := FALSE;
s26a := FALSE;
s26b := FALSE;
s27 := FALSE;
s28 := FALSE;
s29 := FALSE;
s30 := FALSE;
s31 := FALSE;

ZEROS_RobotPoseSimple(wayPointList);
actualCamX := 0;
actualCamY := 0;
trajectoryController.newWaypointListAvailable := FALSE;
trajectoryController.xBoEnable := FALSE;
FeedbackToGW1 := 'Verfuegbar';
resetVar := TRUE;
Gripper.closeGripperCommand := FALSE;
TrajectoryController.xBoReset := TRUE;
ZEROS_INT(removeNodeCollision);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="findNodesToRemove" Id="{ef8384d2-b9d5-47a0-af76-48b877d17d18}">
      <Declaration><![CDATA[METHOD findNodesToRemove : BOOL
METHOD findNodesToRemove : ARRAY[0..10] OF INT
VAR_INPUT
	collisionRobo : ARRAY[1..4] OF INT;
	xPositionCollisionRobo, yPositionCollisionRobo : LREAL;
END_VAR
VAR
	xMinBox, xMaxBox, yMinBox, yMaxBox, row, col : LREAL;
	xNode, yNode : ARRAY[1..170] OF LREAL;
	j, w : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[w := 0;

//Umrechnung von Knoten in Koordinaten
 row := 600;
 col := 200;
 
 FOR i := 1 TO 144 BY 1 DO
	 IF xNode[i] <> 10000 THEN
	 	xNode[i] := col;
	 END_IF
	 IF yNode[i] <> 10000 THEN
	 	yNode[i] := row;
	 END_IF
	 col := col + 400;
	 IF i MOD 18 = 0 THEN
		 col := 200;
		 row := row + 400;
	 END_IF
 END_FOR
 
 xNode[145] := 850;
 xNode[146] := 850;
 xNode[147] := 850;
 xNode[148] := 1350;
 xNode[149] := 1350;
 xNode[150] := 1350;
 xNode[151] := 2050;
 xNode[152] := 2050;
 xNode[153] := 2050;
 xNode[154] := 2490;
 xNode[155] := 2490;
 xNode[156] := 2490;
 xNode[157] := 3190;
 xNode[158] := 3190;
 xNode[159] := 3190;
 xNode[160] := 3700;
 xNode[161] := 3700;
 xNode[162] := 3700;
 xNode[163] := 4420;
 xNode[164] := 4420;
 xNode[165] := 4420;
 xNode[166] := 4940;
 xNode[167] := 4940;
 xNode[168] := 4940;
 xNode[169] := 6117;
 xNode[170] := 6716;
 
 yNode[145] := 2735;
 yNode[146] := 2838;
 yNode[147] := 2936;
 yNode[148] := 2736;
 yNode[149] := 2835;
 yNode[150] := 2935;
 yNode[151] := 2731;
 yNode[152] := 2829;
 yNode[153] := 2931;
 yNode[154] := 2732;
 yNode[155] := 2833;
 yNode[156] := 2928;
 yNode[157] := 2732;
 yNode[158] := 2837;
 yNode[159] := 2940;
 yNode[160] := 2732;
 yNode[161] := 2840;
 yNode[162] := 2940;
 yNode[163] := 2732;
 yNode[164] := 2838;
 yNode[165] := 2944;
 yNode[166] := 2746;
 yNode[167] := 2855;
 yNode[168] := 2942;
 yNode[169] := 3450;
 yNode[170] := 3450;
 

//im Abstand von 400 all Knoten um robot löschen
xMinBox := xPositionCollisionRobo - 400;
xMaxBox := xPositionCollisionRobo + 400;
yMinBox := yPositionCollisionRobo - 400;
yMaxBox := yPositionCollisionRobo + 400;

FOR j := 1 TO 170 BY 1 DO
	IF xNode[j] > xMinBox AND xNode[j] < xMaxBox AND yNode[j] > yMinBox AND yNode[j] < yMaxBox THEN
		removeNodeCollision[w] := j;
		w := w + 1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="removeAllToken" Id="{ae306339-8136-4758-9f9e-43c55251323b}">
      <Declaration><![CDATA[METHOD removeAllToken : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Statemaschine zurücksetzen
sStart := FALSE;
s0 := FALSE;
s1a := FALSE;
s1b := FALSE;
s2 := FALSE;
s3 := FALSE;
s4 := FALSE;
s5 := FALSE;
s6a := FALSE;
s6b := FALSE;
s7 := FALSE;
s8 := FALSE;
s9 := FALSE;
s10 := FALSE;
s11a := FALSE;
s11b := FALSE;
s12 := FALSE;
s13 := FALSE;
s14 := FALSE;
s15 := FALSE;
s16 := FALSE;
s17 := FALSE;
s18 := FALSE;
s19 := FALSE;
s20 := FALSE;
s21a := FALSE;
s21b := FALSE;
s22 := FALSE;
s23 := FALSE;
s24 := FALSE;
s25 := FALSE;
s26a := FALSE;
s26b := FALSE;
s27 := FALSE;
s28 := FALSE;
s29 := FALSE;
s30 := FALSE;
s31 := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TeilVerloren" Id="{8ae8f73b-5bb8-4610-9414-56d24a08916d}">
      <Declaration><![CDATA[METHOD TeilVerloren : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Teil verloren, warten auf Rückmeldung das weiterfahren
//diese Methode aufrufen, wenn LSmuss und kein Teil
//LSmuss gesetzt sobald Greifer zu geht und rückgesetzt, wenn Greifer auf geht

//sicher das es ne gute idee ist, das werkstück zurückzulegen? Wenn runtergefallen ist, wird es kaputt sein...

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Fahrauftrag">
      <LineId Id="1471" Count="0" />
      <LineId Id="1531" Count="2" />
      <LineId Id="1472" Count="0" />
      <LineId Id="1479" Count="0" />
      <LineId Id="1482" Count="0" />
      <LineId Id="1481" Count="0" />
      <LineId Id="1534" Count="0" />
      <LineId Id="1469" Count="1" />
      <LineId Id="1460" Count="0" />
      <LineId Id="1457" Count="0" />
      <LineId Id="999" Count="2" />
      <LineId Id="1003" Count="0" />
      <LineId Id="1002" Count="0" />
      <LineId Id="1321" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="1535" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="1369" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="1360" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="796" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="1453" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="427" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="422" Count="4" />
      <LineId Id="91" Count="0" />
      <LineId Id="983" Count="0" />
      <LineId Id="982" Count="0" />
      <LineId Id="984" Count="0" />
      <LineId Id="1087" Count="3" />
      <LineId Id="987" Count="2" />
      <LineId Id="985" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="1365" Count="0" />
      <LineId Id="531" Count="1" />
      <LineId Id="557" Count="2" />
      <LineId Id="556" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="549" Count="1" />
      <LineId Id="554" Count="0" />
      <LineId Id="552" Count="1" />
      <LineId Id="555" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="263" Count="4" />
      <LineId Id="262" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="261" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="1538" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="1006" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="354" Count="1" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1019" Count="0" />
      <LineId Id="1322" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1015" Count="2" />
      <LineId Id="1013" Count="0" />
      <LineId Id="1011" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="270" Count="13" />
      <LineId Id="286" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="1539" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="1454" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="565" Count="2" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1244" Count="0" />
      <LineId Id="1094" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="1095" Count="2" />
      <LineId Id="141" Count="0" />
      <LineId Id="992" Count="2" />
      <LineId Id="1091" Count="2" />
      <LineId Id="995" Count="2" />
      <LineId Id="1104" Count="0" />
      <LineId Id="1106" Count="1" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1243" Count="0" />
      <LineId Id="998" Count="0" />
      <LineId Id="991" Count="0" />
      <LineId Id="608" Count="1" />
      <LineId Id="611" Count="0" />
      <LineId Id="1364" Count="0" />
      <LineId Id="612" Count="8" />
      <LineId Id="622" Count="2" />
      <LineId Id="607" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="298" Count="14" />
      <LineId Id="399" Count="0" />
      <LineId Id="313" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="1540" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="161" Count="1" />
      <LineId Id="1542" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="358" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="316" Count="13" />
      <LineId Id="402" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="1455" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="943" Count="2" />
      <LineId Id="1100" Count="3" />
      <LineId Id="946" Count="0" />
      <LineId Id="1242" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="657" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="794" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="1456" Count="0" />
      <LineId Id="731" Count="2" />
      <LineId Id="1246" Count="0" />
      <LineId Id="735" Count="1" />
      <LineId Id="1247" Count="1" />
      <LineId Id="737" Count="0" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1199" Count="10" />
      <LineId Id="742" Count="1" />
      <LineId Id="745" Count="0" />
      <LineId Id="1366" Count="0" />
      <LineId Id="746" Count="8" />
      <LineId Id="756" Count="1" />
      <LineId Id="1288" Count="0" />
      <LineId Id="758" Count="8" />
      <LineId Id="768" Count="17" />
      <LineId Id="1543" Count="0" />
      <LineId Id="786" Count="0" />
      <LineId Id="1287" Count="0" />
      <LineId Id="789" Count="1" />
      <LineId Id="729" Count="0" />
      <LineId Id="800" Count="0" />
      <LineId Id="799" Count="0" />
      <LineId Id="801" Count="0" />
      <LineId Id="1537" Count="0" />
      <LineId Id="804" Count="0" />
      <LineId Id="870" Count="4" />
      <LineId Id="876" Count="1" />
      <LineId Id="802" Count="0" />
      <LineId Id="896" Count="2" />
      <LineId Id="1271" Count="14" />
      <LineId Id="899" Count="0" />
      <LineId Id="1286" Count="0" />
      <LineId Id="901" Count="1" />
      <LineId Id="1367" Count="0" />
      <LineId Id="903" Count="35" />
      <LineId Id="1536" Count="0" />
      <LineId Id="939" Count="3" />
      <LineId Id="900" Count="0" />
      <LineId Id="1406" Count="2" />
      <LineId Id="1529" Count="0" />
      <LineId Id="1409" Count="0" />
      <LineId Id="1528" Count="0" />
      <LineId Id="1530" Count="0" />
      <LineId Id="1410" Count="0" />
    </LineIds>
    <LineIds Name="Fahrauftrag.CollisionSolution">
      <LineId Id="22" Count="0" />
      <LineId Id="30" Count="4" />
      <LineId Id="37" Count="7" />
      <LineId Id="126" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="1" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="45" Count="17" />
      <LineId Id="104" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="74" Count="3" />
      <LineId Id="106" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="87" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fahrauftrag.continueAfterCollision">
      <LineId Id="6" Count="3" />
      <LineId Id="17" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="83" Count="21" />
      <LineId Id="107" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="30" Count="4" />
      <LineId Id="108" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="111" Count="28" />
      <LineId Id="110" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="12" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fahrauftrag.doReset">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="36" />
      <LineId Id="45" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="Fahrauftrag.findNodesToRemove">
      <LineId Id="16" Count="85" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fahrauftrag.removeAllToken">
      <LineId Id="6" Count="37" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fahrauftrag.TeilVerloren">
      <LineId Id="5" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>