<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="LinearSpline" Id="{ee8a5752-8731-4d20-b9ec-42a2604040d7}" SpecialFunc="None">
    <Declaration><![CDATA[(*Class: Linear Spline
Implementation of a linear Curve. The linear Spline is defined uniquely by two waypoints.
*)
FUNCTION_BLOCK LinearSpline EXTENDS Spline
VAR_INPUT
	wayPoints: ARRAY[0..1] OF RobotPoseSimple; //Input waypoints for creation of the linear Spline. First element should be startPoint and 
END_VAR
VAR_OUTPUT
END_VAR
VAR
	init : BOOL := FALSE;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[startPoint := wayPoints[0];
endPoint   := wayPoints[1];

startPoint.theta	:= ATAN2(endPoint.y-startPoint.y, endPoint.x-startPoint.x); 
endPoint.theta		:= startPoint.theta;
lengthVar 			:= calculateLength();]]></ST>
    </Implementation>
    <Method Name="calculateLength" Id="{b557106d-f894-499c-b93e-4ca33bd951b4}">
      <Declaration><![CDATA[(* 
Implementation of abstract Spline method.
For internal inital length calculation, should be called in the constructor => protected
*)
METHOD PROTECTED  calculateLength : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[calculateLength := SQRT(EXPT(startPoint.x - endPoint.x,2) + EXPT(startPoint.y - endPoint.y, 2));]]></ST>
      </Implementation>
    </Method>
    <Method Name="diff" Id="{b27160dd-5577-4e29-b3d1-95343ea264e1}">
      <Declaration><![CDATA[(* 
Implementation of abstract Spline method.
Calculates the derivate of the spline at an arbitrary arcLength. Should be implmented for order one and two. Invalid 
orders should write a -1 in every component of the return value.
*)
METHOD  diff : RobotPoseSimple
VAR_INPUT
	arcLength: LREAL; //arcLength at which the corresponding derivative should be calculated
	order: INT := 1;  //optional: order of the derivate, should be implemented for 1 and 2, default: 1
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF order = 1 THEN
	diff.x 		:= COS(startPoint.theta);
	diff.y 		:= SIN(startPoint.theta);
	diff.theta   := -1; //not used
ELSIF order = 2 THEN
	diff.x 		:= 0;
	diff.y 		:= 0;
	diff.theta   := -1; //not used
ELSE
	//invalid input
	diff.x 		:= -1; 
	diff.y 		:= -1;
	diff.theta   := -1; //not used
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getPoint" Id="{2d494b1b-e161-44ef-b005-acd30148114d}">
      <Declaration><![CDATA[(*
Implementation of abstract Spline method.
Gets the configuration of the Spline at any given arcLength. 
*)
METHOD getPoint : RobotPoseSimple
VAR_INPUT
	arcLength	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getPoint.x		:= COS(startPoint.theta)*arcLength + startPoint.x;
getPoint.y		:= SIN(startPoint.theta)*arcLength + startPoint.y;
getPoint.theta  := -1; //not used]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="LinearSpline">
      <LineId Id="58" Count="0" />
      <LineId Id="61" Count="3" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="LinearSpline.calculateLength">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="LinearSpline.diff">
      <LineId Id="32" Count="12" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="LinearSpline.getPoint">
      <LineId Id="13" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>