<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="GW2DummyPRG" Id="{0787e41d-4eca-4238-b335-d5e78c5610c1}" SpecialFunc="None">
    <Declaration><![CDATA[//GW2DummyPRG:
// basic dummy implementation of GW2 functionality for testing purposes
// with 'circle', 'square', 'point' certain hard coded trajectories can be loaded
// with 'set' the loaded trajectory gets communicated over the defined interface to GW3
// with 'enable' the roboter can be started
PROGRAM GW2DummyPRG
VAR
	roboter: TrajectoryControl;
	set: BOOL 		:= FALSE;
	circle: BOOL	:= FALSE;
	square: BOOL	:= FALSE;
	point: BOOL 	:= FALSE;
	enable: BOOL 	:= FALSE;
	cyclic: BOOL	:= FALSE;
	
	wpl: ARRAY [0..100] OF RobotPoseSimple;
	state: INT := 0;
	toStation: BOOL := TRUE;
	//Point
	xRef: LREAL 	:= 0;
	yRef: LREAL 	:= 0;
	thetaRef: LREAL := 0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[roboter.xBoEnable := enable; 
roboter.newWaypointListAvailable := set;

IF circle THEN
	wpl := generateWPLCircle();
ELSIF square THEN
	wpl := generateWPLRect();
ELSIF point THEN
	wpl := generateWPLPoint();
ELSIF cyclic THEN
	driveCyclic();
ELSIF set THEN
	roboter.setWaypointList(wpl);
	IF roboter.yControllerState = ControllerState.setTrajectory THEN
		set := FALSE;
	END_IF
END_IF

]]></ST>
    </Implementation>
    <Method Name="driveCyclic" Id="{730ce0cc-f3e4-41f5-934b-0a2023a9ef7d}">
      <Declaration><![CDATA[METHOD driveCyclic : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF state = 0 THEN	
	wpl := generateWPLStationReverse();
	toStation := TRUE;
	state := 89;
ELSIF state = 1 THEN
	wpl := generateWPLStation();
	toStation := FALSE;
	state := 89;
ELSIF state = 89 THEN
	roboter.setWaypointList(wpl);
	set := TRUE;
	state := 90;
ELSIF state = 90 THEN
	IF roboter.yControllerState = ControllerState.setTrajectory THEN
		set := FALSE;
		state := 91;
	END_IF
ELSIF state = 91 THEN
	IF roboter.yControllerState = ControllerState.ready THEN
		enable := TRUE;
		state := 92;
	END_IF
ELSIF state = 92 THEN
	IF roboter.yControllerState = ControllerState.idle AND roboter.yBoArrivedAtDestination THEN
		enable := FALSE;
		IF toStation THEN
			state := 1;
		ELSE
			state := 0;
		END_IF
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="generateWPLCircle" Id="{723e581b-c10b-48a5-af6d-0cb88e71c220}">
      <Declaration><![CDATA[METHOD generateWPLCircle : ARRAY[0..100] OF RobotPoseSimple 
VAR
	KreisX: ARRAY[0..100] OF LREAL := [3800, 3747, 3247, 2752, 2352, 2200, 2352, 2752, 3247, 3647, 3800, -1];
	KreisY: ARRAY[0..100] OF LREAL := [1300, 1770, 2060, 2060, 1770, 1300, 829,  539,  539,  829 , 1300, -1];
	Theta: LREAL := pi/4;
	alpha : LREAL;
	wpl:  ARRAY[0..100] OF RobotPoseSimple;
	i: INT := 0;
	radius: LREAL := 800;
	xCenter: LREAL := 3000;
	yCenter: LREAL := 1400;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[alpha := 0;

FOR i := 0 TO 99 DO
	alpha := i * 3*2*PI/100.0;
	KreisX[i] := radius * COS(alpha) + xCenter;
	KreisY[i] := radius * SIN(alpha) + yCenter;
END_FOR

KreisX[50] := -1;
KreisY[50] := -1;

// Schreiben in WPL
FOR i := 0 TO 100 DO
	IF KreisX[i] <> -1 AND  KreisY[i] <> -1  THEN
		wpl[i].x 		:= KreisX[i];
		wpl[i].y 		:= KreisY[i];
		wpl[i].theta	:= Theta;
	ELSE 
		wpl[i].x 		:= -1;
		wpl[i].y 		:= -1;
		wpl[i].theta	:= -1;
	END_IF
END_FOR

generateWPLCircle := wpl;]]></ST>
      </Implementation>
    </Method>
    <Method Name="generateWPLPoint" Id="{a6a5c86f-190e-40b9-ad19-053d06bc81af}">
      <Declaration><![CDATA[METHOD generateWPLPoint : ARRAY[0..100] OF RobotPoseSimple 
VAR
	wpl:  ARRAY[0..100] OF RobotPoseSimple;
	i : INT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO 100 DO
	IF i = 0 THEN
		wpl[i].x 		:= xRef;
		wpl[i].y 		:= yRef;
		wpl[i].theta	:= thetaRef;
	ELSE 
		wpl[i].x 		:= -1;
		wpl[i].y 		:= -1;
		wpl[i].theta	:= -1;
	END_IF
END_FOR
generateWPLPoint := wpl;]]></ST>
      </Implementation>
    </Method>
    <Method Name="generateWPLRect" Id="{15904306-5952-490d-bc55-51a6d5a51035}">
      <Declaration><![CDATA[METHOD generateWPLRect : ARRAY[0..100] OF RobotPoseSimple
VAR
	//RechteckX: ARRAY[0..6] OF LREAL := [5000,5000,2000,3000,1500,1500, -1];
	//RechteckY: ARRAY[0..6] OF LREAL := [1500,2000,2000,3000,1500,2000, -1];
//	RechteckX: ARRAY[0..10] OF LREAL := [1000,3000,	5000,5000,5000,3000,1000,1000,1000, -1];
//	RechteckY: ARRAY[0..10] OF LREAL := [1000,1000,	1000,1500,2000,2000,2000,1500,1000, -1];
//	Theta:	   ARRAY[0..10] OF LREAL := [1000,1000,	1000,1500,2000,2000,2000,1500, pi, -1];
	
	RechteckX: ARRAY[0..10] OF LREAL := [4000,4000,	6117, 6114, -1];
	RechteckY: ARRAY[0..10] OF LREAL := [1500,2000,	2000, 3502, -1];
	Theta:	   ARRAY[0..10] OF LREAL := [0,0,0, 0.27, -1];
	
	//RechteckX: ARRAY[0..10] OF LREAL := [4450, 4150, 4150, 5160, 5160, 4859, -1];
	//RechteckY: ARRAY[0..10] OF LREAL :=  [2043, 2043, 1530, 1530, 2033, 2033, -1];
	//RechteckX:  ARRAY[0..10] OF LREAL := [5740, 4480, -1];
	//RechteckY: ARRAY[0..10] OF LREAL :=  [2730, 2734, -1];
	
	wpl:  ARRAY[0..100] OF RobotPoseSimple;
	i: INT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := 0 TO 100 DO
	IF   RechteckX[i] <> -1 AND  RechteckY[i] <> -1  THEN
		wpl[i].x 		:= RechteckX[i];
		wpl[i].y 		:= RechteckY[i];
		wpl[i].theta	:= Theta[i];
	ELSE 
		wpl[i].x 		:= -1;
		wpl[i].y 		:= -1;
		wpl[i].theta	:= -1;
	END_IF
END_FOR

generateWPLRect := wpl;]]></ST>
      </Implementation>
    </Method>
    <Method Name="generateWPLStation" Id="{72e79a22-8f7a-4c32-8372-d9d95c309729}">
      <Declaration><![CDATA[METHOD generateWPLStation : ARRAY[0..100] OF RobotPoseSimple
VAR

	
	x: ARRAY[0..10] OF LREAL := 		[1000, 1650, 1650, 2099, -1,3000,1000,1000,1000, -1];
	y: ARRAY[0..10] OF LREAL := 		[1000, 1000, 2829, 2829, -1,2000,2000,1500,1000, -1];
	theta:	   ARRAY[0..10] OF LREAL := [-1,   1000, 1000, 0,   2000,2000,2000,1500, pi, -1];
	wpl:  ARRAY[0..100] OF RobotPoseSimple;

	i: INT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO 100 DO
	IF   x[i] <> -1 AND  y[i] <> -1  THEN
		wpl[i].x 		:= x[i];
		wpl[i].y 		:= y[i];
		wpl[i].theta	:= Theta[i];
	ELSE 
		wpl[i].x 		:= -1;
		wpl[i].y 		:= -1;
		wpl[i].theta	:= -1;
	END_IF
END_FOR

generateWPLStation := wpl;]]></ST>
      </Implementation>
    </Method>
    <Method Name="generateWPLStationReverse" Id="{311b078a-79c6-438f-84d7-19b7322e05ae}">
      <Declaration><![CDATA[METHOD generateWPLStationReverse : ARRAY[0..100] OF RobotPoseSimple
VAR
	x: ARRAY[0..10] OF LREAL := 		[2099, 1650, 1650, 1000, -1, 3000,1000,1000,1000, -1];
	y: ARRAY[0..10] OF LREAL := 		[2829, 2829, 1000, 1000, -1,2000,2000,1500,1000, -1];
	theta:	   ARRAY[0..10] OF LREAL := [-1,   1000, 1000, pi,   2000,2000,2000,1500, pi, -1];
	wpl:  ARRAY[0..100] OF RobotPoseSimple;
	i: INT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO 100 DO
	IF   x[i] <> -1 AND  y[i] <> -1  THEN
		wpl[i].x 		:= x[i];
		wpl[i].y 		:= y[i];
		wpl[i].theta	:= Theta[i];
	ELSE 
		wpl[i].x 		:= -1;
		wpl[i].y 		:= -1;
		wpl[i].theta	:= -1;
	END_IF
END_FOR

generateWPLStationReverse := wpl;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="GW2DummyPRG">
      <LineId Id="230" Count="17" />
      <LineId Id="95" Count="0" />
    </LineIds>
    <LineIds Name="GW2DummyPRG.driveCyclic">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="GW2DummyPRG.generateWPLCircle">
      <LineId Id="68" Count="8" />
      <LineId Id="67" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="10" />
      <LineId Id="22" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="GW2DummyPRG.generateWPLPoint">
      <LineId Id="10" Count="9" />
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="GW2DummyPRG.generateWPLRect">
      <LineId Id="16" Count="12" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="GW2DummyPRG.generateWPLStation">
      <LineId Id="20" Count="11" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="GW2DummyPRG.generateWPLStationReverse">
      <LineId Id="20" Count="11" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>