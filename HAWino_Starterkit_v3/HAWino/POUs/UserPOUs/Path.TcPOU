<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Path" Id="{95fe6ec8-af15-4fc0-b4c5-550c7aba9b73}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Path EXTENDS Spline
VAR_INPUT
	xWPL: 	ARRAY [0..100] OF LREAL; // raw x data
	yWPL: 	ARRAY [0..100] OF LREAL; // raw y data
	radius: LREAL;
END_VAR
VAR
	x: 					ARRAY [0..100] OF LREAL; // preprocessed x data
	y: 					ARRAY [0..100] OF LREAL; // preprocessed x data
	transitions: 		ARRAY [0..99] OF LREAL;
	subsplines: 		ARRAY [0..99] OF Spline;
	linearSplines:		ARRAY [0..50] OF LinearSpline;
	bezierCurves:		ARRAY [0..49] OF BezierCurve;
	nmbOfSubsplines, nmbOfPreprocessedWaypoints:	INT;
	i, j, k: INT;
	
	xTmpBezier,yTmpBezier:    		ARRAY [0..2] OF LREAL;
 	xTmpLinear,yTmpLinear:    		ARRAY [0..1] OF LREAL;
	start, end:						RobotPoseSimple;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[preprocessWaypointlist();

nmbOfSubsplines := 2*nmbOfPreprocessedWaypoints-3;

FOR i := 1 TO nmbOfSubsplines BY 2 DO
	k := 0;
	//extract relevant points for bezier curve creation
	FOR j := (3*i-1)/2 TO (3*i-1)/2+2 BY 1 DO
		xTmpBezier[k] := x[j]; 
		yTmpBezier[k] := y[j];
		k := k + 1;
	END_FOR  
	bezierCurves[(i-1)/2](x:=xTmpBezier, y:=yTmpBezier, radius:=radius);
	subsplines[i]:= bezierCurves[(i-1)/2];
END_FOR

//last Segment is always linear
xTmpLinear[0] := x[0];
xTmpLinear[1] := x[1];
yTmpLinear[0] := y[0];
yTmpLinear[1] := y[1];
linearSplines[0](x := xTmpLinear, y := yTmpLinear);
subsplines[0] := linearSplines[0];

//last Segment is always linear
xTmpLinear[0] := x[nmbOfPreprocessedWaypoints-2];
xTmpLinear[1] := x[nmbOfPreprocessedWaypoints-1];
yTmpLinear[0] := y[nmbOfPreprocessedWaypoints-2];
yTmpLinear[1] := y[nmbOfPreprocessedWaypoints-1];
linearSplines[(nmbOfSubsplines+1)/2](x := xTmpLinear, y := yTmpLinear);
subsplines[nmbOfSubsplines-1] := linearSplines[(nmbOfSubsplines+1)/2];

//generate the linear segments in between
FOR i := 2 TO nmbOfSubsplines-2 BY 2 DO
	//extract relevant waypoints
	end		  		:= subsplines[i+1].startPointVal; //end is the start point of the next segment
	start  		  := subsplines[i-1].endPointVal;	  //start is the endpoint of the prev segment
	xTmpLinear[0] := start.x;
	xTmpLinear[1] := end.x;
	yTmpLinear[0] := start.y;
	yTmpLinear[1] := end.y;
	linearSplines[i/2](x:=xTmpLinear, y:= yTmpLinear);
	subsplines[i] := linearSplines[i/2];
END_FOR

calculateLength();
calculateTransitions();

startPoint := subsplines[0].startPointVal;
endPoint   := subsplines[nmbOfSubsplines-1].endPointVal;]]></ST>
    </Implementation>
    <Method Name="calculateLength" Id="{fa9150c3-1548-4fad-bc03-2a7bdbb95fff}">
      <Declaration><![CDATA[METHOD PROTECTED  calculateLength : LREAL
VAR_INPUT
END_VAR
VAR
	i: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[calculateLength := 0;
FOR i := 0 TO nmbOfSubsplines-1 DO
	calculateLength := calculateLength + subsplines[i].length;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="calculateTransitions" Id="{52dbb64c-0f38-4919-8d0f-8a50326cf34d}">
      <Declaration><![CDATA[METHOD calculateTransitions
VAR_INPUT
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[transitions[0] := 0;
FOR i := 0 TO nmbOfSubsplines-2 DO
	transitions[i+1] := transitions[i] + subsplines[i].length;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="diff" Id="{c435850d-099e-4883-9ebf-b0187bee6499}">
      <Declaration><![CDATA[METHOD  diff : RobotPoseSimple
VAR_INPUT
	arcLength: LREAL;
	order: INT := 1;
END_VAR
VAR
	subspline: 				Spline;
	arcOffset, deltaTheta: 	LREAL;
	dPos: RobotPoseSimple;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getSubsplineToPoint(arcLength := arcLength,
					subspline => subspline,
					arcOffset => arcOffset);
deltaTheta:= endPoint.theta - startPoint.theta; 		
dPos 		:= subspline.diff(arcLength := arcOffset, order:= order);	
diff.x 		:= dPos.x;
diff.y 		:= dPos.y;	
CASE order OF
	1:
		diff.theta  := deltaTheta*pi/(2*lengthVar)*SIN(pi/lengthVar*arcLength);
	2:
		diff.theta 	:= deltaTheta*EXPT(pi,2)/(2*EXPT(lengthVar,2))*SIN(pi/lengthVar*arcLength);
ELSE
		diff.x      := -1;
		diff.y 		:= -1;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="getDiscontinuousSwitchtingPointCandidate" Id="{cfaa726c-df69-48c1-84c4-a6f3a80b3d25}">
      <Declaration><![CDATA[METHOD getDiscontinuousSwitchtingPointCandidate : ARRAY  [0..99] OF LREAL
VAR_INPUT
END_VAR
VAR
	i : INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO nmbOfSubsplines-2 DO
	getDiscontinuousSwitchtingPointCandidate[i-1]  := transitions[i];
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="getPoint" Id="{edc81ff7-b7ad-4aac-a526-a3258fc65de9}">
      <Declaration><![CDATA[METHOD PUBLIC  getPoint : RobotPoseSimple
VAR_INPUT
	arcLength: LREAL;
END_VAR
VAR
	subspline: Spline;
	arcOffset: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getSubsplineToPoint(arcLength := arcLength,
					subspline => subspline,
					arcOffset => arcOffset);
getPoint := subspline.getPoint(arcLength:= arcOffset);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getSubsplineToPoint" Id="{d9693a58-8dc8-4612-b85b-8d181f60b2f3}">
      <Declaration><![CDATA[METHOD getSubsplineToPoint : Spline
VAR_INPUT
	arcLength: LREAL;
END_VAR

VAR_OUTPUT
	subspline: Spline;
	arcOffset: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[arcOffset := arcLength;
FOR i := 0 TO nmbOfSubsplines-1 DO
	IF arcOffset -subsplines[i].length < 0 THEN
		subspline := subsplines[i];
		EXIT;
	ELSE
		arcOffset := arcOffset -subsplines[i].length;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="length" Id="{9758eca7-15ca-47fd-ba8e-a9ee5447051a}">
      <Declaration><![CDATA[PROPERTY length : LREAL]]></Declaration>
      <Get Name="Get" Id="{e0813d43-db58-4b26-90b5-a965f7cab4d5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{229f1c6f-dee2-45a0-af40-ce116e09667f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="preprocessWaypointlist" Id="{eb2abc10-4b35-4a8b-a276-447cab2534b7}">
      <Declaration><![CDATA[METHOD preprocessWaypointlist 
VAR_IN_OUT
END_VAR
VAR 
	i : 				INT 			:= 0;
	nextIDX: 			INT;
	phi1, phi2: 		LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
x[0] := xWPL[0];
y[0] := yWPL[0];
nextIDX := 1;

FOR i := 1 TO 99 DO
	//exit if last point is reached, last valid point is last point in preprocessed list
	IF xWPL[i+1] = -1 AND yWPL[i+1] = -1 THEN
		x[nextIDX] := xWPL[i];	
		y[nextIDX] := yWPL[i];
		EXIT;
	END_IF	

	phi1 := ATAN2(yWPL[i]-yWPL[i-1],xWPL[i]-xWPL[i-1]);
	phi2 := ATAN2(yWPL[i+1]-yWPL[i],xWPL[i+1]-xWPL[i]);
	IF phi1 <> phi2 THEN
		x[nextIDX] := xWPL[i];	
		y[nextIDX] := yWPL[i];
		nextIDX := nextIDX +1;
	END_IF
END_FOR
nmbOfPreprocessedWaypoints := nextIDX +1;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Path">
      <LineId Id="9" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="64" Count="4" />
      <LineId Id="120" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="70" Count="5" />
      <LineId Id="118" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="82" Count="2" />
      <LineId Id="79" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="96" Count="0" />
    </LineIds>
    <LineIds Name="Path.calculateLength">
      <LineId Id="5" Count="1" />
      <LineId Id="10" Count="1" />
    </LineIds>
    <LineIds Name="Path.calculateTransitions">
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
    </LineIds>
    <LineIds Name="Path.diff">
      <LineId Id="12" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="23" Count="2" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="Path.getDiscontinuousSwitchtingPointCandidate">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
    </LineIds>
    <LineIds Name="Path.getPoint">
      <LineId Id="6" Count="0" />
      <LineId Id="11" Count="2" />
    </LineIds>
    <LineIds Name="Path.getSubsplineToPoint">
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="Path.length.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Path.length.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Path.preprocessWaypointlist">
      <LineId Id="32" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="43" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>