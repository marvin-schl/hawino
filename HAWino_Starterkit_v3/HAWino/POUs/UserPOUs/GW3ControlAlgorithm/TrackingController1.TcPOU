<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TrackingController1" Id="{3e702ae3-5368-41b2-8296-e1a3793683c9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TrackingController1
VAR_INPUT
	// Reference values
	xR 			: LREAL;		// REFERENCE position, x-coordinate in global frame
	yR 			: LREAL;   		// REFERENCE poisiton, y-cooridnate in global frame
	thetaR	 	: LREAL;     	// REFERENCE orientiation in global frame
	vR 			: LREAL;		// REFERENCE linear velocity (tangential TO path)          
	vThetaR 	: LREAL;		// REFERENCE angular velocity
	// Actual values
	x 			: LREAL;		// Actual position, x-coordinate in global frame
	y 			: LREAL;		// Actual position, y-coordinate in global frame
	theta 		: LREAL;      	// Actual orientation in global frame
	v 			: LREAL;		// Actual linear velocity (tangential TO path)
END_VAR

VAR_OUTPUT
	vX			: LREAL;		// x-component of linear velocity (to low-level-controller)
	vY			: LREAL;		// y-component of linear velocity (to low-level controller)
	vTheta		: LREAL;		// Angular velocity (to low-level controller)
	error		: LREAL;		// Control error
END_VAR

VAR
	// Control parameters. Suggestion: start tuning with k1 = 1, k3 = 3
	k1			: LREAL;		// Control parameter, chose k1 > k3 
	k2			: LREAL;		// Control parameter (fixed)
	k3			: LREAL;		// Control parameter, chose k3 > 0
	xE			: LREAL;		// Robot pose error in mobile frame (x-component)
	yE			: LREAL;		// Robot pose error in mobile frame (y-component)
	thetaE		: LREAL;     	// Robot orientation error with resepect to global x-axis
	u1			: LREAL;		// Control variable
	u2			: LREAL;		// Control variable
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Suggested value for k2
k1 := 1;
k3 := 3;
k2 := 2 * ABS(vR) * SQRT(k3);

// State Trafo: Robot pose error in global frame --> mobile frame
xE := COS(theta) * (xR - x) + SIN(theta) * (yR - y);
yE := -SIN(theta) * (xR - x) + COS(theta) * (yR - y);
thetaE := -(thetaR - theta);

// Control law
u2 := -k2 * thetaE + k3 * vR * yE * SI(thetaE);
u1 := vR * (COS(thetaE) - 1) + yE * (vThetaR + u2) + k1 * xE;

// Effective control variables (outputs to low-level-controller)
vX := (u1 + vR) * COS(theta);
vY := (u1 + vR) * SIN(theta);
vTheta := u2 + vThetaR;

// Compute euclidian distance to reference pose
error := SQRT(EXPT(xR - x, 2) + EXPT(yR - y, 2) + EXPT(thetaR - theta, 2));]]></ST>
    </Implementation>
    <LineIds Name="TrackingController1">
      <LineId Id="70" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="71" Count="13" />
      <LineId Id="41" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="87" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>