<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="SimpleObserverST" Id="{9bfb0c63-c7fa-4cc8-ba80-418e5355c9f5}" SpecialFunc="None">
    <Declaration><![CDATA[//SimpleObserver:
//Implements a simple observer which assumes the camera position is the true position of the robot whenever camera data arrives. Between new cam data
//odometry is used to correct the robots position. The cameras latency is also considered by correcting the arrived camera data with odometry based correction
//within the time interval of the latency. The observer is implemented in Simulink and is linked within this FB to abstract the implementation of the observer from the
//main control algorithm. Inside the Simulink model all coordinates are considered as world coordinates, following that the transformation of between robot and world coordinates 
//is implemented in ST.
FUNCTION_BLOCK SimpleObserverST
VAR_INPUT
	xCameraPose:	RobotPoseSimple;
	xVxRobot: 		LREAL;
	xVyRobot: 		LREAL;
	xOmegaRobot: 	LREAL;
	theta:			LREAL; //theta for I/O Lineraztion only explicitly Input for FF-Linearization
END_VAR

VAR_OUTPUT
	yObserverdPose: 	RobotPoseSimple;
END_VAR

VAR
	newCamDataArrived: BOOL;
	camDataOld, observerError, observedPosition, vWorld: RobotPoseSimple;
	pulseGenerator: TP;
	
	delayedCycles		AT%Q* 	: INT	:= 70;
	delayedPosition: ARRAY [0..140] OF RobotPoseSimple;
	
	
	K : ARRAY [0..2,0..2] OF LREAL 		:= [12, 0 ,0,
									  		0, 12, 0,
									  		0, 0, 12];
	
	// TEST
	//systime : NT_GetTime;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//transform roboter velocities into world velocities and pass them to Simulink
Robot2World( 
	vx_robot 	:= xVxRobot,
	vy_robot 	:= xVyRobot,
	omega_robot := xOmegaRobot,
	theta		:= yObserverdPose.theta,
	vx_world 	=> vWorld.x,
	vy_world  	=> vWorld.y,
	omega_world => vWorld.theta);
	
checkForNewCameraData();

//systime(START:=newCamDataArrived);	// TEST

delayPosition();
//if cam data arrived correct
IF newCamDataArrived THEN
	//calculate observer error
	observerError := SubtractRPS(xCameraPose,delayedPosition[delayedCycles]);
	//do the feedback correction
	observedPosition := AddRPS(observedPosition, ScaleRPS(c := Var_HAWIno.CONTROLLER_CYCLE_TIME, AddRPS(vWorld, MatrixTimesRPS(K, observerError))));
ELSE
	observedPosition := AddRPS(observedPosition, ScaleRPS(c := Var_HAWIno.CONTROLLER_CYCLE_TIME, vWorld));
END_IF


//set Outputs
yObserverdPose 	:= observedPosition;
camDataOld 		:= xCameraPose;
]]></ST>
    </Implementation>
    <Method Name="checkForNewCameraData" Id="{f1cf2097-a90f-4703-bbdf-a246f17538d7}">
      <Declaration><![CDATA[METHOD checkForNewCameraData : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[newCamDataArrived := (camDataOld.x <> xCameraPose.x OR camDataOld.y <> xCameraPose.y OR camDataOld.theta <> xCameraPose.theta) //cahnge in one of the positions
					 AND xCameraPose.x <> 0 AND xCameraPose.y <> 0;		//valid data
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="delayPosition" Id="{1134d261-4292-4598-b780-bc2622c2593f}">
      <Declaration><![CDATA[METHOD PRIVATE delayPosition : BOOL
VAR_INPUT
END_VAR
VAR
	i: INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO delayedCycles-1 DO
	delayedPosition[i+1] := delayedPosition[i];
END_FOR
delayedPosition[0] := observedPosition;]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{a72036aa-6b35-4ea4-8248-f4df1f99d19e}">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
VAR
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[observedPosition := xCameraPose;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="SimpleObserverST">
      <LineId Id="465" Count="28" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="SimpleObserverST.checkForNewCameraData">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="SimpleObserverST.delayPosition">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="SimpleObserverST.reset">
      <LineId Id="13" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>