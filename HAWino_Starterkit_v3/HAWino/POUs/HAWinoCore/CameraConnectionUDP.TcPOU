<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="CameraConnectionUDP" Id="{3b4b2ae9-c069-42e3-9b69-f42439287066}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK CameraConnectionUDP IMPLEMENTS ITcIoUdpProtocolRecv
VAR_INPUT
END_VAR
VAR_OUTPUT
	robotPositionArray : ARRAY [1..8] OF RobotPose; 
END_VAR
VAR
	{attribute 'TcInitSymbol'}
	oid : OTCID; // To be set in PLC_Instance object and required for FW_ObjMgr_GetObjectInstance()
	ipUdp : ITcIoUdpProtocol;
	nUdpPort : UINT := 25000;
	nReceivedPakets : UINT;
	//uLastReceivedIP : U_IpAdr; 
	hrInit : HRESULT;
	hrSend  : HRESULT; 
	robotPosition AT %Q* : ARRAY [1..8] OF RobotPose; 
	
	HH					AT	%Q*	:	LREAL;	
	MM					AT	%Q*	:	LREAL;
	SS					AT	%Q*	:	LREAL;
	
	counter	:	UDINT	:= 0;
	x1,y1,theta1,x2,y2,theta2,x3,y3,theta3,x4,y4,theta4,x5,y5,theta5 : LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF ipUdp <> 0 THEN
	ipUdp.CheckReceived();
END_IF



x1 := robotPosition[1].x;
y1 := robotPosition[1].y;
theta1 := robotPosition[1].theta;
x2 := robotPosition[2].x;
y2 := robotPosition[2].y;
theta2 := robotPosition[2].theta;
x3 := robotPosition[3].x;
y3 := robotPosition[3].y;
theta3 := robotPosition[3].theta;
x4 := robotPosition[4].x;
y4 := robotPosition[4].y;
theta4 := robotPosition[4].theta;
x5 := robotPosition[5].x;
y5 := robotPosition[5].y;
theta5 := robotPosition[5].theta;

robotPositionArray := robotPosition;
]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{0258286a-12f2-440d-8e54-fd50a76e4c92}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // no online change
	IF ipUdp <> 0 THEN 
		ipUdp.UnregisterReceiver(nUdpPort); // Shutdown
		FW_SafeRelease(ADR(ipUdp));
		FB_exit := TRUE; 
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{3f9ab792-5971-4b0c-a6bc-dc33a9b3d66e}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
VAR
	ipSrv : ITComObjectServer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // no online change
	IF ipUdp = 0 THEN
	    hrInit := FW_ObjMgr_GetObjectInstance(	oid:=oid, 
											iid:=TC_GLOBAL_IID_LIST.IID_ITcIoUdpProtocol, 
											pipUnk:=ADR(ipUdp) );
		IF SUCCEEDED(hrInit) THEN 
			IF  SUCCEEDED(ipUdp.RegisterReceiver(nUdpPort, THIS^)) THEN //open port
				FB_init := TRUE;
			ELSE 
				FW_SafeRelease(ADR(ipUdp));
			END_IF
		END_IF				
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{230ea14e-9797-48ee-9586-6313ceab7837}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ipUdp <> 0) THEN 
	ipUdp.RegisterReceiver(nUdpPort, THIS^);
	FB_reinit := TRUE; 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveData" Id="{5af5560c-b365-4b5a-a4d3-c718d88bc89b}">
      <Declaration><![CDATA[{attribute 'object_name' := 'ReceiveData'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD ReceiveData : HRESULT
VAR_INPUT
	ipAddr	: UDINT;
	udpDestPort	: UINT;
	udpSrcPort	: UINT;
	nData	: UDINT;
	pData	: PVOID;
	pVlan	: POINTER TO ETYPE_VLAN_HEADER := 0;
END_VAR
VAR 
	i : INT;
	x,y,theta,e : LREAL;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nReceivedPakets := nReceivedPakets+1;
//uLastReceivedIP.ipAdrInternal := ipAddr;


	(*** Auslesen des Datenbereichs von UDP-Paketen ***
	* UDP-Telegramm besteht aus 56*8 = 448 Bytes (siehe UDP-Doku Lokalisierungsrechner)
	  Pro Robotino: 3*8 = 24 Bytes: je 8 Bytes für x-Koord, y-Koord, theta in rad
	  Robotino1: Bytes 1-8   -> x-Koord, Bytes 9-16  -> y-Koord, Bytes 17-24 -> theta
	  Robotino2: Bytes 25-32 -> x-Koord, Bytes 33-40 -> y-Koord, Bytes 41-48 -> theta  usw.. 
	* pData zeigt auf Adressbereich, in dem die 448 Byte großen UDP-Daten liegen
	  in der Schleife werden jeweils 8 Byte in den UDP-Array geschrieben und der Pointer nach
	  jedem Schritt um 8 Byte weiter geschoben.*)
	
IF nData = 448 THEN

	FOR i := 1 TO 8 DO
		memcpy( ADR(x), 	pData + 8 * 0 + 4*8*(i-1), 8);			// x-Koord
		memcpy( ADR(y),    	pData + 8 * 1 + 4*8*(i-1), 8);			// y-Koord
		memcpy( ADR(theta), pData + 8 * 2 + 4*8*(i-1), 8);			// theta
		memcpy( ADR(e), 	pData + 8 * 3 + 4*8*(i-1), 8);			// e
		
		robotPosition[i].x  := (x);
		robotPosition[i].y := (y);
		robotPosition[i].theta := (theta);
		robotPosition[i].e := (e);
			
	END_FOR
	
	memcpy( ADR(HH), pData + 192, 8);						// Hours
	memcpy( ADR(MM), pData + 200, 8);						// Minutes
	memcpy( ADR(SS), pData + 208, 8);						// Seconds
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcAddRef" Id="{2d410f6b-c6bd-4033-8c18-8496c8308aff}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcAddRef'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD TcAddRef : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{0544c61f-9985-4e5f-b52a-347332675914}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcQueryInterface'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR
VAR
	ipUdpRecv : ITcIoUdpProtocolRecv;
	ipUnknown : ITcUnknown;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ITcIoUdpProtocolRecv)) THEN
	ipUdpRecv := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipUdpRecv);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSIF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ITcUnknown)) THEN
	ipUnknown := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipUnknown);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSE
	TcQueryInterface := E_HRESULTAdsErr.NOINTERFACE ; //Call super if this fb extends some other
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcRelease" Id="{bb0886f8-6f09-4d5a-835f-a451f23c160e}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcRelease'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD TcRelease : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CameraConnectionUDP">
      <LineId Id="22" Count="0" />
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="107" Count="1" />
      <LineId Id="110" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="119" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="149" Count="0" />
    </LineIds>
    <LineIds Name="CameraConnectionUDP.FB_exit">
      <LineId Id="3" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CameraConnectionUDP.FB_init">
      <LineId Id="3" Count="4" />
      <LineId Id="25" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CameraConnectionUDP.FB_reinit">
      <LineId Id="3" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CameraConnectionUDP.ReceiveData">
      <LineId Id="22" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="92" Count="9" />
      <LineId Id="60" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="89" Count="1" />
      <LineId Id="190" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="56" Count="0" />
    </LineIds>
    <LineIds Name="CameraConnectionUDP.TcAddRef">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CameraConnectionUDP.TcQueryInterface">
      <LineId Id="14" Count="3" />
      <LineId Id="37" Count="4" />
      <LineId Id="18" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CameraConnectionUDP.TcRelease">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>