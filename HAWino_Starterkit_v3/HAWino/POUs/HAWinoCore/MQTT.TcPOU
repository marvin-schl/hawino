<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MQTT" Id="{3b364ef0-24c5-4b55-9f63-1e0f62f8b4d0}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MQTT
VAR

// Identifikation des Roboters
    //Robot_Number	AT%I*	: INT;	


// Local Variables for Mqtt Client handling
	fbIotMqttClient : FB_IotMqttClient;
	//ClientId : STRING(255);
    //ClientId : STRING(255) := CONCAT('HAWino_', INT_TO_STRING(.Var_HAWIno.Robot_Number));
	bSetParameter 	: BOOL := TRUE;
	bConnect 		: BOOL := TRUE;	
	
// Publish message
	initMQTT : BOOL := FALSE;
	sTopicPubToPowerMgmt : STRING(255); //:= CONCAT('Robots/PowerMgmt/Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number)); 	// ToDo: Bisher ist die Nummer des HAWino fest kodiert
	sTopicPubToPowerMgmt_SOC : STRING(255);// := CONCAT('Robots/PowerMgmt/SoC_Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number)); 
	sPayloadPub : STRING(2000);	
	fbTimerPub 	: TON := (PT:=T#500MS);									// Intervall für das Senden des Akku-Status
	
//Received message
	bSubscribed    : BOOL;
	sTopicSubToPowerMgmt : STRING(255);// := CONCAT('PowerMgmt/Robots/Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number));	// ToDo: Bisher ist die Nummer des HAWino fest kodiert
	sTopicRcv      : STRING(255);
	sPayloadRcv    : STRING(255);
	sPayloadRcv_Status    : STRING(255);
	sPayloadRcv_Status_Test: STRING(255);
	fbMessageQueue : FB_IotMqttMessageQueue;
    fbMessage      : FB_IotMqttMessage;
	hrErrorOccurred : HRESULT; 			// Enthlt dern letzten augetretenen Fehler
	
	//subscribe
	sTopicSubToGW1_Status : STRING(255);
	sTopicSubToGW1_Auftrag : STRING(255);
	sTopicSubCollision : STRING(255);
	sTopicPubCollision : ARRAY[1..4] OF STRING(255);
	sTopicSubReset : STRING(255);
	
// Variables for JSON
	fbJson			: FB_JsonSaxWriter;
	fbJsonDataType 	: FB_JsonReadWriteDataType;
	sJsonDoc       	: STRING(2000); 
	
// Local Variables for TwinCAT IoT Communication (TF6701) with direct link to EK1200 and TcCom
	//stMqtt_HAWino_In	AT%I*	: ST_PwrMgmt_HAWino_In;		// Attention! Don't link TIME Variables, otherwise we get an error!
	//stMqtt_HAWino_Out	AT%Q*	: ST_PwrMgmt_HAWino_Out;
	
	stMqtt_HAWino_In	 AT%I*: ST_PwrMgmt_HAWino_In;		// Attention! Don't link TIME Variables, otherwise we get an error!
	stMqtt_HAWino_Out	 AT%Q*: ST_PwrMgmt_HAWino_Out;
	
	SOC_Out : STRING(255);
	nBatteryTemperature	AT%I*	: INT;
	
	bComCheckAnswer	AT%Q*	: BOOL;
	
	stMqtt_HAWinoValues	: ST_PwrMgmt_HAWino;
	
	
// Timer to create a time stamp
	fbTimerTimestamp : TON := (PT:=T#71582M47S295MS);
	
// Local Vaiables to evaluate and act to input
	fbComCheckFlag	: RS;
	
	
	
	sTopicSubToFleetMgmt: STRING;
	Reset1: BOOL;
	//Input synccheck. robotdata has been read and can be used.
	txtReadInit AT%I* : BOOL := FALSE;
	
	//eigene Variablen
	sTopicPubToGW1 : STRING(255);
	//s0: BOOL := 1;
	//s1, s2, s3, s4, s5, s6, s7: BOOL := 0;
	//AuftragDa: BOOL;
	//Timer1 : TON;
	//Timer2 : TON;
	//startTime1: BOOL;
	//startTime2: BOOL;
	WerkstueckAusgelesen: BOOL;
	//i: INT := 0;
	sPayloadPub1 : STRING(2000);
	Robotstatus : RobotStatusGW1;
	sTopicSubToGW1: STRING(255);
	nPayloadSize:INT;
	sPayloadPubCollision : STRING(100);
	
	FeedbackToGW1 AT%I*: STRING(50);
	RoboNmbToGoBack AT%I* : ARRAY[0..4] OF INT;
	resetVar, resetGoBack AT%I*: BOOL;
	Auftrag AT%Q*: Auftrag;
	StatusFromGW1 AT%Q*: STRING(50);
	goBack AT%Q* : BOOL;
	resetButton AT%Q* : BOOL;
	n: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Case machen! preop op
//Auftrag: {"Art":"Fahrauftrag","AbholStation":1,"AbholTasche":2,"AblageStation":3,"AblageTasche":1}
//Status: {"Status":"WerkstueckAusgelesen"}
//Kollision: {"todo":"goBack"}

IF txtReadInit THEN
	IF NOT initMQTT THEN
		sTopicPubToPowerMgmt  := CONCAT('Robots/PowerMgmt/Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number)); 	
		sTopicPubToPowerMgmt_SOC  := CONCAT('Robots/PowerMgmt/SoC_Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number)); 
		sTopicSubToPowerMgmt  := CONCAT('PowerMgmt/Robots/Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number));
		sTopicSubToGW1  := CONCAT('VPJ/Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number));
		sTopicSubToGW1_Status  := CONCAT(sTopicSubToGW1, '/Status');
		sTopicSubToGW1_Auftrag  := CONCAT(sTopicSubToGW1, '/Auftrag');
		sTopicPubToGW1 := CONCAT('VPJ/Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number));
		sTopicSubCollision := CONCAT('VPJ/Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number));
		sTopicSubCollision := CONCAT(sTopicSubCollision, '/Collision');
		sTopicSubReset  := CONCAT('VPJ/Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number));
		sTopicSubReset  := CONCAT(sTopicSubToGW1, '/Reset');
		FOR n := 1 TO 4 BY 1 DO
			IF n <> .Var_HAWIno.Robot_Number THEN
				sTopicPubCollision[n] := CONCAT('VPJ/Robot_', INT_TO_STRING(n));
				sTopicPubCollision[n] := CONCAT(sTopicPubCollision[n], '/Collision');
			END_IF
		END_FOR
		initMQTT:= TRUE;
	END_IF
	
	stMqtt_HAWinoValues.Output.nRobotNumber := .Var_HAWIno.Robot_Number;			// Anpassen für jeden HAWino
	
	fbTimerTimestamp(In:= NOT fbTimerTimestamp.Q, ET=>stMqtt_HAWinoValues.Output.tTimestamp);
	
	stMqtt_HAWinoValues.Output.fSoC := stMqtt_HAWino_In.fSoC;
	
	stMqtt_HAWinoValues.Output.fActualBatteryCurrent := stMqtt_HAWino_In.fActualBatteryCurrent;
	stMqtt_HAWinoValues.Output.fActualBatteryVoltage := stMqtt_HAWino_In.fActualBatteryVoltage;
	
	//stMqtt_HAWinoValues.Output.fActualBatteryCurrent := stMqtt_HAWino_In.fActualBatteryCurrent;
	//stMqtt_HAWinoValues.Output.fActualBatteryVoltage := stMqtt_HAWino_In.fActualBatteryVoltage;
	
	
	
	
	// Skalierung der Temperaturwerte des Akkus
	stMqtt_HAWinoValues.Output.fBatteryTemperature := FKT_Scale(Rohwert := nBatteryTemperature, 
																	X1 := -500,
																	X2 := 1500, 
																	Y1 := -50,
																	Y2 := 150);
																	
	// Ausgabe der erwarteten Laufzeit des Roboters
	stMqtt_HAWinoValues.Output.nEstimatedRunningTime	:= LIMIT(0,stMqtt_HAWino_In.nEstimatedRunningTime,172800);		// Max. 48 Stunden sollen dargestellt werden
	stMqtt_HAWinoValues.Output.nEstimatedChargingTime	:= LIMIT(0,stMqtt_HAWino_In.nEstimatedChargingTime,172800);		// Max. 48 Stunden sollen dargestellt werden
	
	
	// Antworten auf den Kommunikationstest und des Ladetests
	stMqtt_HAWinoValues.Output.bCheckCurrentDetected := stMqtt_HAWino_In.bCheckCurrentDetected;
	stMqtt_HAWinoValues.Output.bComCheckAnswer := stMqtt_HAWino_In.bComCheckAnswer;
	
	//
	// Setting the parameters for establishing the connection to the Mqtt Broker and initializing the connection.
	//
	IF bSetParameter THEN
		fbIotMqttClient.sHostName := '192.168.0.11';	// IP-Adresse des Servers
		fbIotMqttClient.nHostPort := 1883;
		//fbIotMqttClient.sClientId := ClientId;
		fbIotMqttClient.sClientId := CONCAT('Robot_', INT_TO_STRING(.Var_HAWIno.Robot_Number));
		fbIotMqttClient.sTopicPrefix := '';
		//fbIotMqttClient.nKeepAlive:= 60; 
		fbIotMqttClient.sUserName:= 'VPJ';
		fbIotMqttClient.sUserPassword:= 'R462';
		//fbIotMqttClient.stWill:= ; 
		//fbIotMqttClient.stTLS:= ;
		fbIotMqttClient.ipMessageQueue := fbMessageQueue;
	
		bSetParameter := FALSE;
	END_IF
	
	
	//
	// This method -> MUST BE CALLED CYCLICALLY <- to ensure background communication with the MQTT broker.
	//
	fbIotMqttClient.Execute(bConnect);
	
	IF fbIotMqttClient.bError THEN
		// ToDo: add error logging here
		hrErrorOccurred := fbIotMqttClient.hrErrorCode;
	END_IF
	
		
	IF fbIotMqttClient.bConnected THEN		// Kontrolle, ob der Broker verbunden ist
		IF NOT bSubscribed THEN
			//
			// Abbonieren der Toopics, welche vom PowerMgmt kommen
			//
			bSubscribed := fbIotMqttClient.Subscribe(sTopic:=sTopicSubToPowerMgmt, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
			IF fbIotMqttClient.bError THEN
				// ToDo: add my error logging here
				hrErrorOccurred := fbIotMqttClient.hrErrorCode;
			END_IF
			
			//
			// Abbonieren der Toopics, welche vom Gewerk 1 kommen
			//
			//Abbonieren von Topic: VPJ/Roboter
			bSubscribed := fbIotMqttClient.Subscribe(sTopic:=sTopicSubToGW1_Status, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
			bSubscribed := fbIotMqttClient.Subscribe(sTopic:=sTopicSubToGW1_Auftrag, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
			bSubscribed := fbIotMqttClient.Subscribe(sTopic:=sTopicSubCollision, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
			bSubscribed := fbIotMqttClient.Subscribe(sTopic:=sTopicSubReset, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
			
			
			//bSubscribed := fbIotMqttClient.Subscribe(sTopic:=sTopicSubToFleetMgmt, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
			//IF fbIotMqttClient.bError THEN
				// ToDo: add my error logging here
			//	hrErrorOccurred := fbIotMqttClient.hrErrorCode;
			//END_IF
			
		END_IF
	END_IF	
	
	
	
	// Senden der MQTT- Nachrichten
	
	
	IF fbIotMqttClient.bConnected THEN			// Kontrolle, ob Broker verbunden ist
		fbTimerPub(IN:=TRUE);
		
		//
		// publish new paylod every 500 MS
		//
		IF fbTimerPub.Q THEN					// Abwarten des oben eingestellten Intervalls
			fbTimerPub(IN:=FALSE);
			
			//
			// Nachricht an PowerMgmt
			//
			fbJson.ResetDocument();
			fbJsonDataType.AddJsonValueFromSymbol(fbJson, 'ST_PwrMgmt_HAWino_In', SIZEOF(stMqtt_HAWinoValues.Output), ADR(stMqtt_HAWinoValues.Output));
			//sJsonDoc := fbJson.GetDocument();
			fbJson.CopyDocument(sJsonDoc, SIZEOF(sJsonDoc));
			
			sPayloadPub := sJsonDoc;	
			fbIotMqttClient.Publish(sTopic:= sTopicPubToPowerMgmt, 
										pPayload:= ADR(sPayloadPub), 
										nPayloadSize:= LEN2(ADR(sPayloadPub))+1, 										
										eQoS:= TcIotMqttQos.AtMostOnceDelivery, 
										bRetain:= FALSE, 
										bQueue:= FALSE);
									
									
			
			SOC_Out	:= CONCAT( '{"SoC" : ',LREAL_TO_STRING(stMqtt_HAWinoValues.Output.fSoC));
			SOC_Out	:= CONCAT( SOC_Out,'}');
			
			
			
			
			//SOC_Out := 	LREAL_TO_STRING(stMqtt_HAWinoValues.Output.fSoC);
			
						
			fbIotMqttClient.Publish(sTopic:= sTopicPubToPowerMgmt_SOC, 
										pPayload:=ADR(SOC_Out), 
										nPayloadSize:= INT_TO_UDINT(LEN(SOC_Out)),
										eQoS:= TcIotMqttQos.AtMostOnceDelivery, 
										bRetain:= FALSE, 
										bQueue:= FALSE);
										
										
			IF fbIotMqttClient.bError THEN
				// ToDo: add error logging here
				hrErrorOccurred := fbIotMqttClient.hrErrorCode;
			END_IF	
			
			// Nachricht an GW1 - Produktionsauftrag
			//
			//Statemaschine
			//Timer1(IN:= startTime1, PT:=T#10S);
			//Timer2(IN:= startTime2, PT:=T#10S);
	
			//Rückmeldung Verfügbar
			sPayloadPub1 := CONCAT( '{"Status" : ', FeedbackToGW1);
			sPayloadPub1 := CONCAT( sPayloadPub1,'}');
			
			fbIotMqttClient.Publish(sTopic:= sTopicPubToGW1, 
											pPayload:=ADR(sPayloadPub1), 
											nPayloadSize:= INT_TO_UDINT(LEN(sPayloadPub1)),
											eQoS:= TcIotMqttQos.AtMostOnceDelivery, 
											bRetain:= FALSE, 
											bQueue:= FALSE);
											
											
			//Warten auf Auftrag
			//IF s0 AND NOT s1 AND AuftragDa THEN
				//s0 := 0; s1 := 1;
				//Rückmeldung Auftrag angenommen
				//i := 1;
				//AuftragDa := 0;
				//startTime1 := 1;
			//END_IF
			//IF s1 AND NOT s2 AND Timer1.Q THEN
				//startTime1 := 0;
				//s1 := 0; s2 := 1;
				//Rückmeldung Auf Anfahrt
				//i := 2;
				//startTime2 := 1;
			//END_IF
			//IF s2 AND NOT s3 AND Timer2.Q THEN
				//startTime2 := 0;
				//s2 := 0; s3 := 1;
				//Rückmeldung Teil aufgenommen
				//i := 3;
				//startTime1 := 1;
			//END_IF
			//IF s3 AND NOT s4 AND Timer1.Q THEN
				//startTime1 := 0;
				//s3 := 0; s4 := 1;
				//Rückmeldung Abmeldung
				//i := 4;
			//END_IF
			//Warten auf Werkstück ausgelesen
			//IF s4 AND NOT s5 AND WerkstueckAusgelesen THEN
				//s4 := 0; s5 := 1;
				//Rückmeldung Auf Transport
				//i := 5;
				//WerkstueckAusgelesen := 0;
				//startTime2 := 1;
			//END_IF
			//IF s5 AND NOT s6 AND Timer2.Q THEN
				//startTime2 := 0;
				//s5 := 0; s6 := 1;
				//Rückmeldung Anmeldung
				//i := 6;
			//END_IF
			//Warten auf Werkstück ausgelesen
			//IF s6 AND NOT s7 AND WerkstueckAusgelesen THEN
				//s6 := 0; s7 := 1;
				//Rückmeldung Teil abgelegt
				//i := 7;
				//WerkstueckAusgelesen :=0;
				//startTime1 := 1;
			//END_IF
			//IF s7 AND NOT s0 AND Timer1.Q THEN
				//startTime1 := 0;
				//s7 := 0; s0 := 1;
				//Rückmeldung Verfügbar
			//	i:= 0;
			//END_IF
			
			FOR n := 0 TO 4 BY 1 DO
				IF RoboNmbToGoBack[n] > 0 THEN
					sPayloadPubCollision := '{"todo":"goBack"}';
					
					fbIotMqttClient.Publish(sTopic:= sTopicPubCollision[RoboNmbToGoBack[n]], 
													pPayload:=ADR(sPayloadPubCollision), 
													nPayloadSize:= INT_TO_UDINT(LEN(sPayloadPubCollision)),
													eQoS:= TcIotMqttQos.AtMostOnceDelivery, 
													bRetain:= FALSE, 
													bQueue:= FALSE);
				END_IF
			END_FOR
		END_IF
	END_IF
	
	
	// Verarbeiten der Subscriptions
	
	
	IF fbMessageQueue.nQueuedMessages > 0 THEN			// Kontrolle, ob neue Daten vorliegen
		IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
			fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
			

				
			//
			// Message from PowerMgmt
			//
			IF fbMessage.CompareTopic(sTopic:=sTopicSubToPowerMgmt) THEN		// Wenn die Daten vom PowerMgmt kommen, dann führe folgenede Aktion aus
				fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=FALSE);
			// Json-String aufteilen und in Variablen schreiben
				fbJsonDataType.SetSymbolFromJson(sPayloadRcv,'ST_PwrMgmt_HAWino_Out',SIZEOF(stMqtt_HAWinoValues.Input),ADR(stMqtt_HAWinoValues.Input));
			END_IF
		
			//
			// Hier werden weitere Topics verarbeitet
			// von GW1
			IF fbMessage.CompareTopic(sTopic:=sTopicSubToGW1_Status) THEN
				
				fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv_Status), nPayloadSize:=SIZEOF(sPayloadRcv_Status), bSetNullTermination:=true);
				// Json-String aufteilen und in Variablen schreiben
				fbJsonDataType.SetSymbolFromJson(sPayloadRcv_Status,'RobotStatusGW1',SIZEOF(RobotStatus),ADR(RobotStatus));
				StatusFromGW1 := Robotstatus.Status;
				//IF Robotstatus.Status = 'WerkstueckAusgelesen' THEN
					WerkstueckAusgelesen := 1;
				//END_IF
				Robotstatus.Status := '';
				sPayloadRcv_Status := '';
			END_IF
			
			IF fbMessage.CompareTopic(sTopic:=sTopicSubToGW1_Auftrag) THEN
				fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=TRUE);
			
			// Json-String aufteilen und in Variablen schreiben
				fbJsonDataType.SetSymbolFromJson(sPayloadRcv,'Auftrag',SIZEOF(Auftrag),ADR(Auftrag));
				//AuftragDa := 1;
				//sPayloadRcv zurücksetzen???
			END_IF
			
			//Nachricht von anderem HAWino, dass dieser zurückfahren soll
			IF fbMessage.CompareTopic(sTopic:=sTopicSubCollision) THEN
				goBack := TRUE;
			END_IF
			
			//Nachricht von GW1, dass HAWino reset machen soll (nach Fehler)
			IF fbMessage.CompareTopic(sTopic:=sTopicSubReset) THEN
				resetButton := TRUE;
			END_IF
			
		END_IF
	END_IF	
	
	IF resetVar THEN
		StatusFromGW1 := '';
		Robotstatus.Status := '';
		sPayloadRcv_Status := '';
		Auftrag.AbholStation := 0;
		Auftrag.AbholTasche := 0;
		Auftrag.AblageStation := 0;
		Auftrag.AblageTasche := 0;
		Auftrag.Art := '';
		resetButton := FALSE;
	END_IF
	
	IF resetGoBack THEN
		goBack := FALSE;
	END_IF
	
	
	// Evaulierung der empfangenen Daten
	
	//
	// ToDo: Plausibilitätsprüfung von stMqtt_HAWinoValues.Input und evt. TypConversion
	// Attention! The assignment of input to output is correct. Don `t change!
	//	
	
	stMqtt_HAWino_Out.bChargingActive := stMqtt_HAWinoValues.Input.bChargingActive;
	stMqtt_HAWino_Out.bExternalRecalibrationTrigger := stMqtt_HAWinoValues.Input.bExternalRecalibrationTrigger;
	stMqtt_HAWino_Out.fExternalRecalibrationValue := stMqtt_HAWinoValues.Input.fExternalRecalibrationValue;
	
	
	// Hier Communication Check einbauen
	
	//fbComCheckFlag(Set:= stMqtt_HAWinoValues.Input.bComCheckRequest, 
	//					Reset1:= NOT stMqtt_HAWinoValues.Input.bComCheckRequest,
	//					Q1 => bComCheckAnswer);
	bComCheckAnswer	:= TRUE;
					
END_IF]]></ST>
    </Implementation>
    <LineIds Name="MQTT">
      <LineId Id="889" Count="0" />
      <LineId Id="1495" Count="0" />
      <LineId Id="1503" Count="0" />
      <LineId Id="890" Count="0" />
      <LineId Id="1843" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="821" Count="0" />
      <LineId Id="823" Count="1" />
      <LineId Id="960" Count="0" />
      <LineId Id="1189" Count="0" />
      <LineId Id="1209" Count="0" />
      <LineId Id="1494" Count="0" />
      <LineId Id="1704" Count="0" />
      <LineId Id="2353" Count="0" />
      <LineId Id="1845" Count="1" />
      <LineId Id="1707" Count="0" />
      <LineId Id="1711" Count="0" />
      <LineId Id="1714" Count="0" />
      <LineId Id="2352" Count="0" />
      <LineId Id="1715" Count="0" />
      <LineId Id="1712" Count="0" />
      <LineId Id="825" Count="0" />
      <LineId Id="822" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="195" Count="1" />
      <LineId Id="194" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="444" Count="2" />
      <LineId Id="443" Count="0" />
      <LineId Id="198" Count="6" />
      <LineId Id="197" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="210" Count="2" />
      <LineId Id="215" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="216" Count="1" />
      <LineId Id="213" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="225" Count="6" />
      <LineId Id="693" Count="0" />
      <LineId Id="232" Count="8" />
      <LineId Id="220" Count="0" />
      <LineId Id="242" Count="5" />
      <LineId Id="253" Count="0" />
      <LineId Id="248" Count="2" />
      <LineId Id="241" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="280" Count="13" />
      <LineId Id="954" Count="0" />
      <LineId Id="956" Count="0" />
      <LineId Id="1211" Count="0" />
      <LineId Id="1706" Count="0" />
      <LineId Id="1955" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="295" Count="3" />
      <LineId Id="301" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="303" Count="2" />
      <LineId Id="302" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="310" Count="24" />
      <LineId Id="1497" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="621" Count="0" />
      <LineId Id="629" Count="1" />
      <LineId Id="627" Count="1" />
      <LineId Id="626" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="625" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="612" Count="1" />
      <LineId Id="618" Count="0" />
      <LineId Id="615" Count="1" />
      <LineId Id="614" Count="0" />
      <LineId Id="619" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="336" Count="4" />
      <LineId Id="1039" Count="16" />
      <LineId Id="1057" Count="5" />
      <LineId Id="1175" Count="0" />
      <LineId Id="1069" Count="6" />
      <LineId Id="1082" Count="6" />
      <LineId Id="1095" Count="6" />
      <LineId Id="1108" Count="3" />
      <LineId Id="1176" Count="0" />
      <LineId Id="1118" Count="0" />
      <LineId Id="1187" Count="0" />
      <LineId Id="1119" Count="5" />
      <LineId Id="1130" Count="5" />
      <LineId Id="1141" Count="0" />
      <LineId Id="1188" Count="0" />
      <LineId Id="1142" Count="5" />
      <LineId Id="1153" Count="1" />
      <LineId Id="1716" Count="0" />
      <LineId Id="2452" Count="0" />
      <LineId Id="1728" Count="0" />
      <LineId Id="1718" Count="0" />
      <LineId Id="1720" Count="5" />
      <LineId Id="1717" Count="0" />
      <LineId Id="1038" Count="0" />
      <LineId Id="2453" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="1190" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="399" Count="5" />
      <LineId Id="1311" Count="0" />
      <LineId Id="405" Count="4" />
      <LineId Id="421" Count="1" />
      <LineId Id="410" Count="5" />
      <LineId Id="1193" Count="0" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1309" Count="0" />
      <LineId Id="1404" Count="0" />
      <LineId Id="1196" Count="0" />
      <LineId Id="1199" Count="0" />
      <LineId Id="1610" Count="1" />
      <LineId Id="1201" Count="0" />
      <LineId Id="1206" Count="0" />
      <LineId Id="2252" Count="0" />
      <LineId Id="1192" Count="0" />
      <LineId Id="1212" Count="0" />
      <LineId Id="1214" Count="1" />
      <LineId Id="1312" Count="0" />
      <LineId Id="1216" Count="0" />
      <LineId Id="1213" Count="0" />
      <LineId Id="1613" Count="0" />
      <LineId Id="2153" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="1729" Count="0" />
      <LineId Id="1852" Count="0" />
      <LineId Id="1731" Count="0" />
      <LineId Id="1733" Count="0" />
      <LineId Id="1730" Count="0" />
      <LineId Id="1848" Count="0" />
      <LineId Id="1853" Count="0" />
      <LineId Id="1850" Count="1" />
      <LineId Id="1849" Count="0" />
      <LineId Id="1737" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="1400" Count="0" />
      <LineId Id="1603" Count="0" />
      <LineId Id="2054" Count="0" />
      <LineId Id="2253" Count="0" />
      <LineId Id="1606" Count="3" />
      <LineId Id="1605" Count="0" />
      <LineId Id="1854" Count="0" />
      <LineId Id="1604" Count="0" />
      <LineId Id="1743" Count="3" />
      <LineId Id="423" Count="1" />
      <LineId Id="420" Count="0" />
      <LineId Id="426" Count="3" />
      <LineId Id="425" Count="0" />
      <LineId Id="431" Count="2" />
      <LineId Id="430" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="440" Count="1" />
      <LineId Id="435" Count="2" />
      <LineId Id="418" Count="0" />
      <LineId Id="552" Count="1" />
      <LineId Id="438" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>