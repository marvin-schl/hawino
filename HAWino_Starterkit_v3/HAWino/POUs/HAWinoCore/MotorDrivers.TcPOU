<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MotorDrivers" Id="{26a2aa4e-afb1-47b4-a75b-3f81a7f1ad40}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MotorDrivers
VAR	
	//Zustandsautomat
	state:		CoreDriveState	:=	CoreDriveState.init;

	//Achsen Freischalten
	enableMotors: BOOL	:=0;

	//Umgerechnete Werte
	vX:		LREAL:=0;
	vY:		LREAL:=0;
	vTheta:	LREAL:=0;

	//Fahrrichtung Motor
	velocityMotor1 :LREAL:=0;
	velocityMotor2 :LREAL:=0;
	velocityMotor3 :LREAL:=0;
	
	//Skalierung auf MaxGeschwindigkeit Skalierung hängt mit CoE Register 8020:07 8020:08 zusammen !!!
	velocityMax:LREAL:=942.4777961;// Nenndrehzahl U/min CoE Register 8020:07 8020:08 fesgelegt Faktor 16 Wegen Getriebe 1:16
	velocityMotorsTf:LREAL:=0;
	
	// Skalierung auf Ansteuersignale LREAL=>WORD   Skalierung hängt mit CoE Register 8020:07 8020:08 zusammen !!!
	skalPos:LREAL:=34.7668668;//  MaxValue/MaxVelocity   [1/ mm/s]   32767/(942mm/s)   MaxVelocity=D*PI*n/(16*60) //16:1 Getriebeübersetzung  
	skalNeg:LREAL:=34.76792783;//  MaxVelau/MaxVelocity   [1/ mm/s]   32768/(942mm/s)   MaxVelocity=(80mm*PI*3600 U/min)/(16*60sec/min)
	
	//Inputs: CartesianToMotors + Bumper
	vXCartesianToMotors 	AT%I*:	LREAL:=0;
	vYCartesianToMotors 	AT%I*:	LREAL:=0;
	vThetaCartesianToMotors AT%I*:	LREAL:=0;
	bumper	   				AT%I*:	BOOL:=0;
	bumperStopReset 		AT%I*: 	BOOL:=0;
	
	//Outputs: Motor Values and Enable Signal
	enableToMotor1 AT%Q*:BOOL:=FALSE;
	enableToMotor2 AT%Q*:BOOL:=FALSE;
	enableToMotor3 AT%Q*:BOOL:=FALSE;
	
	velocityToMotor1 AT%Q*:INT:=0;
	velocityToMotor2 AT%Q*:INT:=0;
	velocityToMotor3 AT%Q*:INT:=0;
	
	counter: ULINT;
	Test: LREAL;
END_VAR
VAR CONSTANT
	Revisionsnummer: REAL:=0.3;// Vor dem Hochladen Nummer inkrementieren. Dadurch lässt sich prüfen, ob die neuste Version online ist.
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(****** Konverzierung ToMotors Anfang************
Übersetzung der Koordinatentransformation aus dem Simulink Starterkit

	  conversion from positive and / or negative longitudinal, lateral and
	  rotational velocities(in milimeters per second) to three separate
	  positive motor velocities(resolution: 1Byte) and their rotation direction
inputs:  	vX  (longitudinal velocity in milimeters per second)
         	vY  (lateral velocity in milimeters per second)
			vTheta     (rotational velocity in milimeters per second)
outputs : velocityToMotor1	
			velocityToMotor2
			velocityToMotor3
conversion from longitudinal, lateral & rotational velocity to the
three separate motor velocities
*)


vX:=-vXCartesianToMotors;
vY:=-vYCartesianToMotors;
vTheta:=-vThetaCartesianToMotors;
Test:=EXPT(2,-1024);
velocityMotor1 := (-vX * COS(30.0*PI/180))	+ (vY * COS(60.0*PI/180))	+ (vTheta * 135.0);
velocityMotor2 := 0.0						+ (-vY)						+ (vTheta * 135.0);
velocityMotor3 := (vX * COS(30.0*PI/180))	+ (vY * COS(60.0*PI/180))	+ (vTheta * 135.0);

(* 	Geschwindigkeitsbegrenzung:
	Der Simulink Regler hat keine Output Begrenzung!
	Wenn Geschwindigkeit > v_max, dann muss v skaliert werden -> andere Motorgeschwindigkeiten müssen 
	dann entsprechend mitskaliert werden
	velocityMotorsTf: Faktor, der alle Geschwindigkeit auf v_max runterskaliert
*)
IF (velocityMotor1 > velocityMax) OR (velocityMotor1 < -velocityMax) THEN
    velocityMotorsTf:= velocityMotor1;
    IF (velocityMotorsTf = 0) THEN
			velocityMotorsTf:=1;
	END_IF
	// sign(velocityMotorsTf/ABS(velocityMotorsTf) = velocityMotorsTf/ABS(velocityMotorsTf)
    velocityMotor1:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax;
    velocityMotor2:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax/velocityMotorsTf * velocityMotor2 ;
    velocityMotor3:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax/velocityMotorsTf * velocityMotor3 ;
END_IF

IF (velocityMotor2 > velocityMax) OR (velocityMotor2 < -velocityMax) THEN
    velocityMotorsTf:= velocityToMotor2;
    IF (velocityMotorsTf = 0) THEN
		velocityMotorsTf:=1;
	END_IF
	// sign(velocityMotorsTf/ABS(velocityMotorsTf) = velocityMotorsTf/ABS(velocityMotorsTf)
    velocityMotor1:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax/velocityMotorsTf * velocityToMotor1;
    velocityMotor2:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax;
    velocityMotor3:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax/velocityMotorsTf * velocityToMotor3;
END_IF

IF (velocityMotor3 > velocityMax) OR (velocityMotor3 < -velocityMax) THEN
    velocityMotorsTf:= velocityToMotor3;
    IF (velocityMotorsTf = 0) THEN
			velocityMotorsTf:=1;
	END_IF
	// sign(velocityMotorsTf/ABS(velocityMotorsTf) = velocityMotorsTf/ABS(velocityMotorsTf)
    velocityMotor1:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax/velocityMotorsTf * velocityMotor1;
    velocityMotor2:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax/velocityMotorsTf * velocityMotor2 ;
    velocityMotor3:= velocityMotorsTf/ABS(velocityMotorsTf)*velocityMax;
END_IF
// Konvertierung ToMotors ENDE********************************************************


//MOTORANSTEUERUNG Zustandsautomat
CASE state OF
	CoreDriveState.init:						
						IF NOT bumper AND NOT bumperStopReset THEN
							state:=CoreDriveState.drive;
						END_IF
						
	CoreDriveState.drive:
						IF velocityMotor1>=0 THEN
							velocityToMotor1:=LREAL_TO_INT(velocityMotor1*skalPos);
						ELSE
							velocityToMotor1:=LREAL_TO_INT(velocityMotor1*skalNeg);
						END_IF
						
						IF velocityMotor2>=0 THEN
							velocityToMotor2:=LREAL_TO_INT(velocityMotor2*skalPos);
						ELSE
							velocityToMotor2:=LREAL_TO_INT(velocityMotor2*skalNeg);
						END_IF
						
						IF velocityMotor3>=0 THEN
							velocityToMotor3:=LREAL_TO_INT(velocityMotor3*skalPos);
						ELSE
							velocityToMotor3:=LREAL_TO_INT(velocityMotor3*skalNeg); 
						END_IF
							
							enableToMotor1:=1;
							enableToMotor2:=1;
							enableToMotor3:=1;
							
						IF bumper=TRUE THEN
							state:=CoreDriveState.BumperStop;
						END_IF
						
	CoreDriveState.BumperStop:
						velocityToMotor1:=0;
						velocityToMotor2:=0;
						velocityToMotor3:=0;
						enableToMotor1:=0;
						enableToMotor2:=0;
						enableToMotor3:=0;
						
						IF NOT bumper AND bumperStopReset THEN
							state := CoreDriveState.Init;
						END_IF
	ELSE
		state:=CoreDriveState.init;
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="MotorDrivers">
      <LineId Id="1590" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="1359" Count="0" />
      <LineId Id="643" Count="3" />
      <LineId Id="649" Count="2" />
      <LineId Id="653" Count="2" />
      <LineId Id="662" Count="1" />
      <LineId Id="1358" Count="0" />
      <LineId Id="1532" Count="1" />
      <LineId Id="940" Count="0" />
      <LineId Id="942" Count="1" />
      <LineId Id="688" Count="3" />
      <LineId Id="1135" Count="0" />
      <LineId Id="897" Count="0" />
      <LineId Id="1363" Count="0" />
      <LineId Id="1366" Count="2" />
      <LineId Id="1361" Count="0" />
      <LineId Id="898" Count="2" />
      <LineId Id="1480" Count="1" />
      <LineId Id="1697" Count="0" />
      <LineId Id="901" Count="3" />
      <LineId Id="924" Count="2" />
      <LineId Id="1484" Count="1" />
      <LineId Id="927" Count="0" />
      <LineId Id="1701" Count="0" />
      <LineId Id="928" Count="2" />
      <LineId Id="905" Count="0" />
      <LineId Id="932" Count="2" />
      <LineId Id="1482" Count="1" />
      <LineId Id="935" Count="0" />
      <LineId Id="1702" Count="0" />
      <LineId Id="936" Count="2" />
      <LineId Id="931" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="1107" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="1182" Count="0" />
      <LineId Id="1184" Count="0" />
      <LineId Id="1193" Count="0" />
      <LineId Id="1257" Count="0" />
      <LineId Id="1195" Count="0" />
      <LineId Id="1647" Count="0" />
      <LineId Id="1187" Count="0" />
      <LineId Id="1234" Count="19" />
      <LineId Id="1233" Count="0" />
      <LineId Id="1254" Count="0" />
      <LineId Id="1196" Count="1" />
      <LineId Id="1192" Count="0" />
      <LineId Id="1648" Count="0" />
      <LineId Id="1188" Count="0" />
      <LineId Id="1202" Count="4" />
      <LineId Id="1201" Count="0" />
      <LineId Id="1643" Count="3" />
      <LineId Id="1199" Count="1" />
      <LineId Id="1185" Count="0" />
      <LineId Id="1258" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>