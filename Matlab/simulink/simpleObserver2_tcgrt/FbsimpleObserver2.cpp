
// ****************** FbsimpleObserver2.cpp *************************
// Generated by TE140x-TargetForMatlabSimulink  2.3.1.1
// MATLAB 9.11.0.2022996 (R2021b) Update 4 (win64)
// TwinCAT 3.1.4024.0
// TwinCAT Target 2.3.1.1
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************

#include "TcPch.h"
#pragma hdrstop

#include "FbsimpleObserver2.h"

#include "simpleObserver2.h"

#include "ObjClassFactory.h"
using namespace TcMgSdk;

///////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
#if TC_BUILD<=4024
DEFINE_THIS_FILE()
#endif

///////////////////////////////////////////////////////////////////////////////
// CFbsimpleObserver2 specific globals
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbsimpleObserver2 static members
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbsimpleObserver2 implementation
///////////////////////////////////////////////////////////////////////////////
CFbsimpleObserver2::CFbsimpleObserver2()
{
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;


	
}

CFbsimpleObserver2::~CFbsimpleObserver2()
{

}

bool CFbsimpleObserver2::FB_Main()
{

	bool fbMainResult = true;

	

	auto fpState = FpControl(FpCtrlSection::Update);
	::simpleObserver2_step(((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M));

	FpRestore(fpState);


	return fbMainResult;
}

void CFbsimpleObserver2::_FB_Main(ST_FB_Main_FB_simpleObserver2* ST_Param)
{
	ST_Param->result = ((CFbsimpleObserver2*)ST_Param->pInst)->FB_Main(  );
}

bool CFbsimpleObserver2::FB_exit(bool bInCopyCode)
{

	bool fbExitResult = true;

	auto fpState = FpControl(FpCtrlSection::Init);
	if (((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)!=NULL)
	{
		::simpleObserver2_terminate(((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M));
		PsimpleObserver2_M = NULL;
	}

	FpRestore(fpState);


	SingleInstanceRelease();
	__super::Exit(bInCopyCode);

	return fbExitResult;
}

void CFbsimpleObserver2::_FB_exit(ST_FB_exit_FB_simpleObserver2* ST_Param)
{
	ST_Param->result = ((CFbsimpleObserver2*)ST_Param->pInst)->FB_exit( ST_Param->bInCopyCode );
}

bool CFbsimpleObserver2::FB_init(bool bInitRetains, bool bInCopyCode)
{

	bool fbInitResult = true;

	if(fbInitResult)
	{
		PsimpleObserver2_M = ::simpleObserver2();
		memset(&(TcModuleInput_Estimator1_K),0,sizeof(TcModuleInput_Estimator1_K));
		memset(&(TcModuleInput_InCameraPose),0,sizeof(TcModuleInput_InCameraPose));
		memset(&(TcModuleOutput_DEBUG),0,sizeof(TcModuleOutput_DEBUG));
		memset(&(TcModuleOutput_OutEstimatedPose),0,sizeof(TcModuleOutput_OutEstimatedPose));
		memset(&(TcModuleOutput_version),0,sizeof(TcModuleOutput_version));
		TcModuleInput_Estimator1_K[0][0] = 1;
		TcModuleInput_Estimator1_K[0][1] = 0;
		TcModuleInput_Estimator1_K[0][2] = 0;
		TcModuleInput_Estimator1_K[1][0] = 0;
		TcModuleInput_Estimator1_K[1][1] = 1;
		TcModuleInput_Estimator1_K[1][2] = 0;
		TcModuleInput_Estimator1_K[2][0] = 0;
		TcModuleInput_Estimator1_K[2][1] = 0;
		TcModuleInput_Estimator1_K[2][2] = 1;
		TcModuleInput_Estimator1_Reset = 0;
		TcModuleInput_Estimator1_cameraDelayCylces = 0;
		TcModuleInput_InCameraPose[0] = 0;
		TcModuleInput_InCameraPose[1] = 0;
		TcModuleInput_InCameraPose[2] = 0;
		TcModuleInput_InVThetaworld = 0;
		TcModuleInput_InVXworld = 0;
		TcModuleInput_InVYworld = 0;

		m_pData = nullptr;
		fbInitResult = __super::Init(0,TC_BUILD_MIN,bInitRetains,bInCopyCode);
		if (!fbInitResult)
		{
			error("__super::Init() did not succeed");
		}
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;


	}

	fbInitResult &= SingleInstanceLock(GUID_NULL);
	if(fbInitResult)
	{
		auto fpState = FpControl(FpCtrlSection::Init);
		::simpleObserver2_initialize(((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->K_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_Estimator1_K));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->Reset_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_Estimator1_Reset));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->cameraDelayCylces_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_Estimator1_cameraDelayCylces));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->InCameraPose_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_InCameraPose));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->InVThetaworld_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_InVThetaworld));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->InVXworld_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_InVXworld));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->InVYworld_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_InVYworld));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->DEBUG_PWORK = reinterpret_cast<PVOID>(&(TcModuleOutput_DEBUG));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->OutEstimatedPose_PWORK = reinterpret_cast<PVOID>(&(TcModuleOutput_OutEstimatedPose));
		((RT_MODEL_simpleObserver2_T*)PsimpleObserver2_M)->dwork->version_PWORK = reinterpret_cast<PVOID>(&(TcModuleOutput_version));

		FpRestore(fpState);
	}
	else
	{
		error("SingleInstanceLock() did not succeed");
	}

	return fbInitResult;
}

void CFbsimpleObserver2::_FB_init(ST_FB_init_FB_simpleObserver2* ST_Param)
{
	ST_Param->result = ((CFbsimpleObserver2*)ST_Param->pInst)->FB_init( ST_Param->bInitRetains, ST_Param->bInCopyCode );
}




BEGIN_FUNC_MAP_FB(CFbsimpleObserver2)
	FUNC_ENTRY_LIB(VID_simpleObserver2, CID_FB_SIMPLEOBSERVER2 , "FB_simpleObserver2" "__main", CFbsimpleObserver2::_FB_Main)
FUNC_METHOD_ENTRY_LIB(VID_simpleObserver2,CID_FB_SIMPLEOBSERVER2 , "FB_EXIT", "FB_simpleObserver2" "__FB_exit", CFbsimpleObserver2::_FB_exit)
FUNC_METHOD_ENTRY_LIB(VID_simpleObserver2,CID_FB_SIMPLEOBSERVER2 , "FB_INIT", "FB_simpleObserver2" "__FB_init", CFbsimpleObserver2::_FB_init)

END_FUNC_MAP_FB()

DECLARE_FUNCMAP_CREATOR(HandleFuncMap_CFbsimpleObserver2)
{
	return CFbsimpleObserver2::TcHandleFuncMap(mode, idx, idxcounter, pFncId, pipFnc, ppMethod, ppName, pSignature, pVersion);
}
