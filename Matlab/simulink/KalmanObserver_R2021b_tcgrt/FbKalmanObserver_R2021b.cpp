
// ****************** FbKalmanObserver_R2021b.cpp *************************
// Generated by TE140x-TargetForMatlabSimulink  2.3.1.1
// MATLAB 9.11.0.2022996 (R2021b) Update 4 (win64)
// TwinCAT 3.1.4024.0
// TwinCAT Target 2.3.1.1
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************

#include "TcPch.h"
#pragma hdrstop

#include "FbKalmanObserver_R2021b.h"

#include "KalmanObserver_R2021b.h"

#include "ObjClassFactory.h"
using namespace TcMgSdk;

///////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
#if TC_BUILD<=4024
DEFINE_THIS_FILE()
#endif

///////////////////////////////////////////////////////////////////////////////
// CFbKalmanObserver_R2021b specific globals
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbKalmanObserver_R2021b static members
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbKalmanObserver_R2021b implementation
///////////////////////////////////////////////////////////////////////////////
CFbKalmanObserver_R2021b::CFbKalmanObserver_R2021b()
{
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;


	
}

CFbKalmanObserver_R2021b::~CFbKalmanObserver_R2021b()
{

}

bool CFbKalmanObserver_R2021b::FB_Main()
{

	bool fbMainResult = true;

	

	auto fpState = FpControl(FpCtrlSection::Update);
	::KalmanObserver_R2021b_step();

	FpRestore(fpState);


	return fbMainResult;
}

void CFbKalmanObserver_R2021b::_FB_Main(ST_FB_Main_FB_KalmanObserver_R2021b* ST_Param)
{
	ST_Param->result = ((CFbKalmanObserver_R2021b*)ST_Param->pInst)->FB_Main(  );
}

bool CFbKalmanObserver_R2021b::FB_exit(bool bInCopyCode)
{

	bool fbExitResult = true;

	auto fpState = FpControl(FpCtrlSection::Init);
	::KalmanObserver_R2021b_terminate();

	FpRestore(fpState);


	SingleInstanceRelease();
	__super::Exit(bInCopyCode);

	return fbExitResult;
}

void CFbKalmanObserver_R2021b::_FB_exit(ST_FB_exit_FB_KalmanObserver_R2021b* ST_Param)
{
	ST_Param->result = ((CFbKalmanObserver_R2021b*)ST_Param->pInst)->FB_exit( ST_Param->bInCopyCode );
}

bool CFbKalmanObserver_R2021b::FB_init(bool bInitRetains, bool bInCopyCode)
{

	bool fbInitResult = true;

	if(fbInitResult)
	{
		memset(&(TcModuleInput_InCameraPose),0,sizeof(TcModuleInput_InCameraPose));
		memset(&(TcModuleOutput_DEBUG),0,sizeof(TcModuleOutput_DEBUG));
		memset(&(TcModuleOutput_OutSimpleObsPose),0,sizeof(TcModuleOutput_OutSimpleObsPose));
		memset(&(TcModuleOutput_OutSimpleObsPose1),0,sizeof(TcModuleOutput_OutSimpleObsPose1));
		memset(&(TcModuleOutput_version),0,sizeof(TcModuleOutput_version));
		TcModuleInput_InCameraPose[0] = 0;
		TcModuleInput_InCameraPose[1] = 0;
		TcModuleInput_InCameraPose[2] = 0;
		TcModuleInput_InVThetaworld = 0;
		TcModuleInput_InVXworld = 0;
		TcModuleInput_InVYworld = 0;
		TcModuleInput_omegaToRobot = 0;
		TcModuleInput_vxToRobot = 0;
		TcModuleInput_vyToRobot = 0;

		m_pData = nullptr;
		fbInitResult = __super::Init(0,TC_BUILD_MIN,bInitRetains,bInCopyCode);
		if (!fbInitResult)
		{
			error("__super::Init() did not succeed");
		}
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;


	}

	fbInitResult &= SingleInstanceLock({0xB58DDB04, 0xBFC8, 0x3E5A, {0x9B, 0x86, 0x83, 0x7C, 0xD0, 0x76, 0xF4, 0xEF}});
	if(fbInitResult)
	{
		auto fpState = FpControl(FpCtrlSection::Init);
		::KalmanObserver_R2021b_initialize();
		KalmanObserver_R2021b_DW.InCameraPose_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_InCameraPose));
		KalmanObserver_R2021b_DW.InVThetaworld_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_InVThetaworld));
		KalmanObserver_R2021b_DW.InVXworld_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_InVXworld));
		KalmanObserver_R2021b_DW.InVYworld_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_InVYworld));
		KalmanObserver_R2021b_DW.omegaToRobot_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_omegaToRobot));
		KalmanObserver_R2021b_DW.vxToRobot_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_vxToRobot));
		KalmanObserver_R2021b_DW.vyToRobot_PWORK = reinterpret_cast<PVOID>(&(TcModuleInput_vyToRobot));
		KalmanObserver_R2021b_DW.DEBUG_PWORK = reinterpret_cast<PVOID>(&(TcModuleOutput_DEBUG));
		KalmanObserver_R2021b_DW.OutSimpleObsPose_PWORK = reinterpret_cast<PVOID>(&(TcModuleOutput_OutSimpleObsPose));
		KalmanObserver_R2021b_DW.OutSimpleObsPose1_PWORK = reinterpret_cast<PVOID>(&(TcModuleOutput_OutSimpleObsPose1));
		KalmanObserver_R2021b_DW.version_PWORK = reinterpret_cast<PVOID>(&(TcModuleOutput_version));

		FpRestore(fpState);
	}
	else
	{
		error("SingleInstanceLock() did not succeed");
	}

	return fbInitResult;
}

void CFbKalmanObserver_R2021b::_FB_init(ST_FB_init_FB_KalmanObserver_R2021b* ST_Param)
{
	ST_Param->result = ((CFbKalmanObserver_R2021b*)ST_Param->pInst)->FB_init( ST_Param->bInitRetains, ST_Param->bInCopyCode );
}




BEGIN_FUNC_MAP_FB(CFbKalmanObserver_R2021b)
	FUNC_ENTRY_LIB(VID_KalmanObserver_R2021b, CID_FB_KALMANOBSERVER_R2021B , "FB_KalmanObserver_R2021b" "__main", CFbKalmanObserver_R2021b::_FB_Main)
FUNC_METHOD_ENTRY_LIB(VID_KalmanObserver_R2021b,CID_FB_KALMANOBSERVER_R2021B , "FB_EXIT", "FB_KalmanObserver_R2021b" "__FB_exit", CFbKalmanObserver_R2021b::_FB_exit)
FUNC_METHOD_ENTRY_LIB(VID_KalmanObserver_R2021b,CID_FB_KALMANOBSERVER_R2021B , "FB_INIT", "FB_KalmanObserver_R2021b" "__FB_init", CFbKalmanObserver_R2021b::_FB_init)

END_FUNC_MAP_FB()

DECLARE_FUNCMAP_CREATOR(HandleFuncMap_CFbKalmanObserver_R2021b)
{
	return CFbKalmanObserver_R2021b::TcHandleFuncMap(mode, idx, idxcounter, pFncId, pipFnc, ppMethod, ppName, pSignature, pVersion);
}
