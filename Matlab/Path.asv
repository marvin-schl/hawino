classdef Path < Spline
    properties
        startPoint
        endPoint
        transitions
    end
    
    properties (Access=private)
        subsplines
        
    end
    
    methods 
        function obj = Path(x,y,r,dx)
           
           nmbSubSplines = 2*length(x)-3;
           %%obj.subsplines   = Spline.empty(nmbSubSplines,0);
           subsplines   = Spline.empty();
           obj.transitions  = zeros(length(obj.subsplines)-1,1);
           
           %generate bezier curves
           for i = 2:2:nmbSubSplines-1
                spline  = BezierCurve(x(i-1:i+1),y(i-1:i+1),r,dx);
                isa(spline,"
                subsplines(i) = BezierCurve(x(i-1:i+1),y(i-1:i+1),r,dx);
           end
           
           %generate first linear
           obj.subsplines(1) = LinearSpline(...
                            [x(1),obj.subsplines(2).startPoint.x],...
                            [y(1),obj.subsplines(2).startPoint.y]);
           %generate last linear
           obj.subsplines(nmbSubSplines) = LinearSpline(...
                        [obj.subsplines(nmbSubSplines-1).endPoint.x, x(nmbSubSplines)],...
                        [obj.subsplines(nmbSubSplines-1).endPoint.y, y(nmbSubSplines)]);

           %generate linears in between
           for i = 3:2:nmbSubSplines-3
                x = [obj.subsplines(i-1).endPoint.x,obj.subsplines(i+1).startPoint.x];
                y = [obj.subsplines(i-1).endPoint.y,obj.subsplines(i+1).startPoint.y];
                obj.subsplines(i) = LinearSpline(x,y);
           end
           
           obj.length = obj.calculateLength();
           obj.transitions = obj.calculateTransitions();
           obj.startPoint = struct("x", x(1), "y", y(1));
           obj.endPoint =  struct("x", x(nmbSubSplines+1), "y", y(nmbSubSplines+1));      
        end
        
        function [x,y] = getPoint(obj, s)
            idx = obj.getSubsplineToPoint(s);
            x = zeros(length(s),1);
            y = zeros(length(s),1);
            for i = 1:length(idx)
                [x(i),y(i)] = obj.subsplines(idx(i)).getPoint(s(i)-obj.transitions(idx(i)));
            end
        end
        
    end
    
    methods (Access = private)
        function splineIdx = getSubsplineToPoint(obj, s)
            splineIdx = zeros(length(s),1);
            for i = 1:length(s)
                idx = find((obj.transitions <= s(i)) == 0,1);
                if isempty(idx)
                    idx = length(obj.transitions);
                end
                splineIdx(i,1) = idx-1;
            end
            
        end
        
        function t = calculateTransitions(obj)    
            t = zeros(length(obj.subsplines)-1,1);
            for i = 1:length(obj.subsplines)
                t(i+1,1) = t(i,1) + obj.subsplines(i).getLength();
            end 
        end
        
        
    end
    
    methods (Access = protected)
        function len = calculateLength(obj)
            len = 0;
            for i = 1:length(obj.subsplines)
                len = len + obj.subsplines(i).getLength();
            end
        end
    end
    
end
